/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Hypertable.ThriftGen
{

  [Serializable]
  public partial class ScanSpec : TBase
  {
    private List<RowInterval> _row_intervals;
    private List<CellInterval> _cell_intervals;
    private bool _return_deletes;
    private int _versions;
    private int _row_limit;
    private long _start_time;
    private long _end_time;
    private List<string> _columns;
    private bool _keys_only;
    private int _cell_limit;
    private int _cell_limit_per_family;
    private string _row_regexp;
    private string _value_regexp;
    private bool _scan_and_filter_rows;
    private int _row_offset;
    private int _cell_offset;
    private List<ColumnPredicate> _column_predicates;
    private bool _do_not_cache;

    public List<RowInterval> Row_intervals
    {
      get
      {
        return _row_intervals;
      }
      set
      {
        __isset.row_intervals = true;
        this._row_intervals = value;
      }
    }

    public List<CellInterval> Cell_intervals
    {
      get
      {
        return _cell_intervals;
      }
      set
      {
        __isset.cell_intervals = true;
        this._cell_intervals = value;
      }
    }

    public bool Return_deletes
    {
      get
      {
        return _return_deletes;
      }
      set
      {
        __isset.return_deletes = true;
        this._return_deletes = value;
      }
    }

    public int Versions
    {
      get
      {
        return _versions;
      }
      set
      {
        __isset.versions = true;
        this._versions = value;
      }
    }

    public int Row_limit
    {
      get
      {
        return _row_limit;
      }
      set
      {
        __isset.row_limit = true;
        this._row_limit = value;
      }
    }

    public long Start_time
    {
      get
      {
        return _start_time;
      }
      set
      {
        __isset.start_time = true;
        this._start_time = value;
      }
    }

    public long End_time
    {
      get
      {
        return _end_time;
      }
      set
      {
        __isset.end_time = true;
        this._end_time = value;
      }
    }

    public List<string> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public bool Keys_only
    {
      get
      {
        return _keys_only;
      }
      set
      {
        __isset.keys_only = true;
        this._keys_only = value;
      }
    }

    public int Cell_limit
    {
      get
      {
        return _cell_limit;
      }
      set
      {
        __isset.cell_limit = true;
        this._cell_limit = value;
      }
    }

    public int Cell_limit_per_family
    {
      get
      {
        return _cell_limit_per_family;
      }
      set
      {
        __isset.cell_limit_per_family = true;
        this._cell_limit_per_family = value;
      }
    }

    public string Row_regexp
    {
      get
      {
        return _row_regexp;
      }
      set
      {
        __isset.row_regexp = true;
        this._row_regexp = value;
      }
    }

    public string Value_regexp
    {
      get
      {
        return _value_regexp;
      }
      set
      {
        __isset.value_regexp = true;
        this._value_regexp = value;
      }
    }

    public bool Scan_and_filter_rows
    {
      get
      {
        return _scan_and_filter_rows;
      }
      set
      {
        __isset.scan_and_filter_rows = true;
        this._scan_and_filter_rows = value;
      }
    }

    public int Row_offset
    {
      get
      {
        return _row_offset;
      }
      set
      {
        __isset.row_offset = true;
        this._row_offset = value;
      }
    }

    public int Cell_offset
    {
      get
      {
        return _cell_offset;
      }
      set
      {
        __isset.cell_offset = true;
        this._cell_offset = value;
      }
    }

    public List<ColumnPredicate> Column_predicates
    {
      get
      {
        return _column_predicates;
      }
      set
      {
        __isset.column_predicates = true;
        this._column_predicates = value;
      }
    }

    public bool Do_not_cache
    {
      get
      {
        return _do_not_cache;
      }
      set
      {
        __isset.do_not_cache = true;
        this._do_not_cache = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool row_intervals;
      public bool cell_intervals;
      public bool return_deletes;
      public bool versions;
      public bool row_limit;
      public bool start_time;
      public bool end_time;
      public bool columns;
      public bool keys_only;
      public bool cell_limit;
      public bool cell_limit_per_family;
      public bool row_regexp;
      public bool value_regexp;
      public bool scan_and_filter_rows;
      public bool row_offset;
      public bool cell_offset;
      public bool column_predicates;
      public bool do_not_cache;
    }

    public ScanSpec() {
      this._return_deletes = false;
      this._versions = 0;
      this._row_limit = 0;
      this._keys_only = false;
      this._cell_limit = 0;
      this._cell_limit_per_family = 0;
      this._scan_and_filter_rows = false;
      this._row_offset = 0;
      this._cell_offset = 0;
      this._do_not_cache = false;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Row_intervals = new List<RowInterval>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  RowInterval _elem2 = new RowInterval();
                  _elem2 = new RowInterval();
                  _elem2.Read(iprot);
                  Row_intervals.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Cell_intervals = new List<CellInterval>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  CellInterval _elem5 = new CellInterval();
                  _elem5 = new CellInterval();
                  _elem5.Read(iprot);
                  Cell_intervals.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Return_deletes = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Versions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Row_limit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Start_time = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              End_time = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                Columns = new List<string>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  string _elem8 = null;
                  _elem8 = iprot.ReadString();
                  Columns.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Keys_only = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              Cell_limit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Cell_limit_per_family = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Row_regexp = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Value_regexp = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              Scan_and_filter_rows = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Row_offset = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Cell_offset = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.List) {
              {
                Column_predicates = new List<ColumnPredicate>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  ColumnPredicate _elem11 = new ColumnPredicate();
                  _elem11 = new ColumnPredicate();
                  _elem11.Read(iprot);
                  Column_predicates.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Bool) {
              Do_not_cache = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ScanSpec");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Row_intervals != null && __isset.row_intervals) {
        field.Name = "row_intervals";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Row_intervals.Count));
          foreach (RowInterval _iter12 in Row_intervals)
          {
            _iter12.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cell_intervals != null && __isset.cell_intervals) {
        field.Name = "cell_intervals";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Cell_intervals.Count));
          foreach (CellInterval _iter13 in Cell_intervals)
          {
            _iter13.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.return_deletes) {
        field.Name = "return_deletes";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Return_deletes);
        oprot.WriteFieldEnd();
      }
      if (__isset.versions) {
        field.Name = "versions";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Versions);
        oprot.WriteFieldEnd();
      }
      if (__isset.row_limit) {
        field.Name = "row_limit";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Row_limit);
        oprot.WriteFieldEnd();
      }
      if (__isset.start_time) {
        field.Name = "start_time";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Start_time);
        oprot.WriteFieldEnd();
      }
      if (__isset.end_time) {
        field.Name = "end_time";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(End_time);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (string _iter14 in Columns)
          {
            oprot.WriteString(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.keys_only) {
        field.Name = "keys_only";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Keys_only);
        oprot.WriteFieldEnd();
      }
      if (__isset.cell_limit_per_family) {
        field.Name = "cell_limit_per_family";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cell_limit_per_family);
        oprot.WriteFieldEnd();
      }
      if (Row_regexp != null && __isset.row_regexp) {
        field.Name = "row_regexp";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Row_regexp);
        oprot.WriteFieldEnd();
      }
      if (Value_regexp != null && __isset.value_regexp) {
        field.Name = "value_regexp";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Value_regexp);
        oprot.WriteFieldEnd();
      }
      if (__isset.scan_and_filter_rows) {
        field.Name = "scan_and_filter_rows";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Scan_and_filter_rows);
        oprot.WriteFieldEnd();
      }
      if (__isset.cell_limit) {
        field.Name = "cell_limit";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cell_limit);
        oprot.WriteFieldEnd();
      }
      if (__isset.row_offset) {
        field.Name = "row_offset";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Row_offset);
        oprot.WriteFieldEnd();
      }
      if (__isset.cell_offset) {
        field.Name = "cell_offset";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cell_offset);
        oprot.WriteFieldEnd();
      }
      if (Column_predicates != null && __isset.column_predicates) {
        field.Name = "column_predicates";
        field.Type = TType.List;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Column_predicates.Count));
          foreach (ColumnPredicate _iter15 in Column_predicates)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.do_not_cache) {
        field.Name = "do_not_cache";
        field.Type = TType.Bool;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Do_not_cache);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ScanSpec(");
      sb.Append("Row_intervals: ");
      sb.Append(Row_intervals);
      sb.Append(",Cell_intervals: ");
      sb.Append(Cell_intervals);
      sb.Append(",Return_deletes: ");
      sb.Append(Return_deletes);
      sb.Append(",Versions: ");
      sb.Append(Versions);
      sb.Append(",Row_limit: ");
      sb.Append(Row_limit);
      sb.Append(",Start_time: ");
      sb.Append(Start_time);
      sb.Append(",End_time: ");
      sb.Append(End_time);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(",Keys_only: ");
      sb.Append(Keys_only);
      sb.Append(",Cell_limit: ");
      sb.Append(Cell_limit);
      sb.Append(",Cell_limit_per_family: ");
      sb.Append(Cell_limit_per_family);
      sb.Append(",Row_regexp: ");
      sb.Append(Row_regexp);
      sb.Append(",Value_regexp: ");
      sb.Append(Value_regexp);
      sb.Append(",Scan_and_filter_rows: ");
      sb.Append(Scan_and_filter_rows);
      sb.Append(",Row_offset: ");
      sb.Append(Row_offset);
      sb.Append(",Cell_offset: ");
      sb.Append(Cell_offset);
      sb.Append(",Column_predicates: ");
      sb.Append(Column_predicates);
      sb.Append(",Do_not_cache: ");
      sb.Append(Do_not_cache);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
