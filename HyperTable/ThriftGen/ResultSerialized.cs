/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Hypertable.ThriftGen
{

  [Serializable]
  public partial class ResultSerialized : TBase
  {
    private bool _is_empty;
    private long _id;
    private bool _is_scan;
    private bool _is_error;
    private int _error;
    private string _error_msg;
    private byte[] _cells;

    public bool Is_empty
    {
      get
      {
        return _is_empty;
      }
      set
      {
        __isset.is_empty = true;
        this._is_empty = value;
      }
    }

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public bool Is_scan
    {
      get
      {
        return _is_scan;
      }
      set
      {
        __isset.is_scan = true;
        this._is_scan = value;
      }
    }

    public bool Is_error
    {
      get
      {
        return _is_error;
      }
      set
      {
        __isset.is_error = true;
        this._is_error = value;
      }
    }

    public int Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public string Error_msg
    {
      get
      {
        return _error_msg;
      }
      set
      {
        __isset.error_msg = true;
        this._error_msg = value;
      }
    }

    public byte[] Cells
    {
      get
      {
        return _cells;
      }
      set
      {
        __isset.cells = true;
        this._cells = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool is_empty;
      public bool id;
      public bool is_scan;
      public bool is_error;
      public bool error;
      public bool error_msg;
      public bool cells;
    }

    public ResultSerialized() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Is_empty = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Is_scan = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              Is_error = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Error = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Error_msg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Cells = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResultSerialized");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.is_empty) {
        field.Name = "is_empty";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_empty);
        oprot.WriteFieldEnd();
      }
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_scan) {
        field.Name = "is_scan";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_scan);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_error) {
        field.Name = "is_error";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_error);
        oprot.WriteFieldEnd();
      }
      if (__isset.error) {
        field.Name = "error";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Error);
        oprot.WriteFieldEnd();
      }
      if (Error_msg != null && __isset.error_msg) {
        field.Name = "error_msg";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Error_msg);
        oprot.WriteFieldEnd();
      }
      if (Cells != null && __isset.cells) {
        field.Name = "cells";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Cells);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResultSerialized(");
      sb.Append("Is_empty: ");
      sb.Append(Is_empty);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(",Is_scan: ");
      sb.Append(Is_scan);
      sb.Append(",Is_error: ");
      sb.Append(Is_error);
      sb.Append(",Error: ");
      sb.Append(Error);
      sb.Append(",Error_msg: ");
      sb.Append(Error_msg);
      sb.Append(",Cells: ");
      sb.Append(Cells);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
