/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Hypertable.ThriftGen
{

  [Serializable]
  public partial class Schema : TBase
  {
    private Dictionary<string, AccessGroup> _access_groups;
    private Dictionary<string, ColumnFamily> _column_families;

    public Dictionary<string, AccessGroup> Access_groups
    {
      get
      {
        return _access_groups;
      }
      set
      {
        __isset.access_groups = true;
        this._access_groups = value;
      }
    }

    public Dictionary<string, ColumnFamily> Column_families
    {
      get
      {
        return _column_families;
      }
      set
      {
        __isset.column_families = true;
        this._column_families = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool access_groups;
      public bool column_families;
    }

    public Schema() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Access_groups = new Dictionary<string, AccessGroup>();
                TMap _map32 = iprot.ReadMapBegin();
                for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                {
                  string _key34;
                  AccessGroup _val35;
                  _key34 = iprot.ReadString();
                  _val35 = new AccessGroup();
                  _val35.Read(iprot);
                  Access_groups[_key34] = _val35;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Column_families = new Dictionary<string, ColumnFamily>();
                TMap _map36 = iprot.ReadMapBegin();
                for( int _i37 = 0; _i37 < _map36.Count; ++_i37)
                {
                  string _key38;
                  ColumnFamily _val39;
                  _key38 = iprot.ReadString();
                  _val39 = new ColumnFamily();
                  _val39.Read(iprot);
                  Column_families[_key38] = _val39;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Schema");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Access_groups != null && __isset.access_groups) {
        field.Name = "access_groups";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Access_groups.Count));
          foreach (string _iter40 in Access_groups.Keys)
          {
            oprot.WriteString(_iter40);
            Access_groups[_iter40].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Column_families != null && __isset.column_families) {
        field.Name = "column_families";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Column_families.Count));
          foreach (string _iter41 in Column_families.Keys)
          {
            oprot.WriteString(_iter41);
            Column_families[_iter41].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Schema(");
      sb.Append("Access_groups: ");
      sb.Append(Access_groups);
      sb.Append(",Column_families: ");
      sb.Append(Column_families);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
