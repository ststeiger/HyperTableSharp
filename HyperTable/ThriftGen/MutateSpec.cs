/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Hypertable.ThriftGen
{

  [Serializable]
  public partial class MutateSpec : TBase
  {
    private string _appname;
    private int _flush_interval;
    private int _flags;

    public string Appname
    {
      get
      {
        return _appname;
      }
      set
      {
        __isset.appname = true;
        this._appname = value;
      }
    }

    public int Flush_interval
    {
      get
      {
        return _flush_interval;
      }
      set
      {
        __isset.flush_interval = true;
        this._flush_interval = value;
      }
    }

    public int Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool appname;
      public bool flush_interval;
      public bool flags;
    }

    public MutateSpec() {
      this._appname = "";
      this._flush_interval = 1000;
      this._flags = 2;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Appname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Flush_interval = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Flags = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MutateSpec");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Appname != null && __isset.appname) {
        field.Name = "appname";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Appname);
        oprot.WriteFieldEnd();
      }
      if (__isset.flush_interval) {
        field.Name = "flush_interval";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Flush_interval);
        oprot.WriteFieldEnd();
      }
      if (__isset.flags) {
        field.Name = "flags";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Flags);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MutateSpec(");
      sb.Append("Appname: ");
      sb.Append(Appname);
      sb.Append(",Flush_interval: ");
      sb.Append(Flush_interval);
      sb.Append(",Flags: ");
      sb.Append(Flags);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
