/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Hypertable.ThriftGen
{
  public class ClientService {
    public interface Iface {
      void namespace_create(string ns);
      void create_namespace(string ns);
      void create_table(long ns, string table_name, string schema);
      void table_create(long ns, string table_name, string schema);
      void alter_table(long ns, string table_name, string schema);
      void table_alter(long ns, string table_name, string schema);
      void refresh_table(long ns, string table_name);
      long namespace_open(string ns);
      long open_namespace(string ns);
      void namespace_close(long ns);
      void close_namespace(long ns);
      long future_open(int capacity);
      long open_future(int capacity);
      void future_cancel(long ff);
      void cancel_future(long ff);
      Result future_get_result(long ff, int timeout_millis);
      Result get_future_result(long ff, int timeout_millis);
      ResultAsArrays future_get_result_as_arrays(long ff, int timeout_millis);
      ResultAsArrays get_future_result_as_arrays(long ff, int timeout_millis);
      ResultSerialized future_get_result_serialized(long ff, int timeout_millis);
      ResultSerialized get_future_result_serialized(long ff, int timeout_millis);
      bool future_is_empty(long ff);
      bool future_is_full(long ff);
      bool future_is_cancelled(long ff);
      bool future_has_outstanding(long ff);
      void future_close(long ff);
      void close_future(long ff);
      long scanner_open(long ns, string table_name, ScanSpec scan_spec);
      long open_scanner(long ns, string table_name, ScanSpec scan_spec);
      long async_scanner_open(long ns, string table_name, long future, ScanSpec scan_spec);
      long open_scanner_async(long ns, string table_name, long future, ScanSpec scan_spec);
      void scanner_close(long scanner);
      void close_scanner(long scanner);
      void async_scanner_cancel(long scanner);
      void cancel_scanner_async(long scanner);
      void async_scanner_close(long scanner);
      void close_scanner_async(long scanner);
      List<Cell> scanner_get_cells(long scanner);
      List<Cell> next_cells(long scanner);
      List<List<string>> scanner_get_cells_as_arrays(long scanner);
      List<List<string>> next_cells_as_arrays(long scanner);
      byte[] scanner_get_cells_serialized(long scanner);
      byte[] next_cells_serialized(long scanner);
      List<Cell> scanner_get_row(long scanner);
      List<Cell> next_row(long scanner);
      List<List<string>> scanner_get_row_as_arrays(long scanner);
      List<List<string>> next_row_as_arrays(long scanner);
      byte[] scanner_get_row_serialized(long scanner);
      byte[] next_row_serialized(long scanner);
      List<Cell> get_row(long ns, string table_name, string row);
      List<List<string>> get_row_as_arrays(long ns, string name, string row);
      byte[] get_row_serialized(long ns, string table_name, string row);
      byte[] get_cell(long ns, string table_name, string row, string column);
      List<Cell> get_cells(long ns, string table_name, ScanSpec scan_spec);
      List<List<string>> get_cells_as_arrays(long ns, string name, ScanSpec scan_spec);
      byte[] get_cells_serialized(long ns, string name, ScanSpec scan_spec);
      void shared_mutator_refresh(long ns, string table_name, MutateSpec mutate_spec);
      void refresh_shared_mutator(long ns, string table_name, MutateSpec mutate_spec);
      void shared_mutator_set_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells);
      void offer_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells);
      void shared_mutator_set_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells);
      void offer_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells);
      void shared_mutator_set_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell);
      void offer_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell);
      void shared_mutator_set_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell);
      void offer_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell);
      long mutator_open(long ns, string table_name, int flags, int flush_interval);
      long open_mutator(long ns, string table_name, int flags, int flush_interval);
      long async_mutator_open(long ns, string table_name, long future, int flags);
      long open_mutator_async(long ns, string table_name, long future, int flags);
      void mutator_close(long mutator);
      void close_mutator(long mutator);
      void async_mutator_cancel(long mutator);
      void cancel_mutator_async(long mutator);
      void async_mutator_close(long mutator);
      void close_mutator_async(long mutator);
      void mutator_set_cell(long mutator, Cell cell);
      void set_cell(long ns, string table_name, Cell cell);
      void mutator_set_cell_as_array(long mutator, List<string> cell);
      void set_cell_as_array(long ns, string table_name, List<string> cell);
      void mutator_set_cells(long mutator, List<Cell> cells);
      void set_cells(long ns, string table_name, List<Cell> cells);
      void mutator_set_cells_as_arrays(long mutator, List<List<string>> cells);
      void set_cells_as_arrays(long ns, string table_name, List<List<string>> cells);
      void mutator_set_cells_serialized(long mutator, byte[] cells, bool flush);
      void set_cells_serialized(long ns, string table_name, byte[] cells);
      void mutator_flush(long mutator);
      void flush_mutator(long mutator);
      void async_mutator_set_cell(long mutator, Cell cell);
      void set_cell_async(long mutator, Cell cell);
      void async_mutator_set_cell_as_array(long mutator, List<string> cell);
      void set_cell_as_array_async(long mutator, List<string> cell);
      void async_mutator_set_cells(long mutator, List<Cell> cells);
      void set_cells_async(long mutator, List<Cell> cells);
      void async_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells);
      void set_cells_as_arrays_async(long mutator, List<List<string>> cells);
      void async_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush);
      void set_cells_serialized_async(long mutator, byte[] cells, bool flush);
      void async_mutator_flush(long mutator);
      void flush_mutator_async(long mutator);
      bool namespace_exists(string ns);
      bool exists_namespace(string ns);
      bool exists_table(long ns, string name);
      bool table_exists(long ns, string name);
      string table_get_id(long ns, string table_name);
      string get_table_id(long ns, string table_name);
      string table_get_schema_str(long ns, string table_name);
      string get_schema_str(long ns, string table_name);
      string table_get_schema_str_with_ids(long ns, string table_name);
      string get_schema_str_with_ids(long ns, string table_name);
      Schema table_get_schema(long ns, string table_name);
      Schema get_schema(long ns, string table_name);
      List<string> get_tables(long ns);
      List<NamespaceListing> namespace_get_listing(long ns);
      List<NamespaceListing> get_listing(long ns);
      List<TableSplit> table_get_splits(long ns, string table_name);
      List<TableSplit> get_table_splits(long ns, string table_name);
      void namespace_drop(string ns, bool if_exists);
      void drop_namespace(string ns, bool if_exists);
      void rename_table(long ns, string name, string new_name);
      void table_rename(long ns, string name, string new_name);
      void drop_table(long ns, string name, bool if_exists);
      void table_drop(long ns, string name, bool if_exists);
      string generate_guid();
      string create_cell_unique(long ns, string table_name, Key key, string value);
      string error_get_text(int error_code);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public void namespace_create(string ns)
      {
        send_namespace_create(ns);
        recv_namespace_create();
      }

      public void send_namespace_create(string ns)
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_create", TMessageType.Call, seqid_));
        namespace_create_args args = new namespace_create_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_namespace_create()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_create_result result = new namespace_create_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void create_namespace(string ns)
      {
        send_create_namespace(ns);
        recv_create_namespace();
      }

      public void send_create_namespace(string ns)
      {
        oprot_.WriteMessageBegin(new TMessage("create_namespace", TMessageType.Call, seqid_));
        create_namespace_args args = new create_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_create_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_namespace_result result = new create_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void create_table(long ns, string table_name, string schema)
      {
        send_create_table(ns, table_name, schema);
        recv_create_table();
      }

      public void send_create_table(long ns, string table_name, string schema)
      {
        oprot_.WriteMessageBegin(new TMessage("create_table", TMessageType.Call, seqid_));
        create_table_args args = new create_table_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_create_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_table_result result = new create_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void table_create(long ns, string table_name, string schema)
      {
        send_table_create(ns, table_name, schema);
        recv_table_create();
      }

      public void send_table_create(long ns, string table_name, string schema)
      {
        oprot_.WriteMessageBegin(new TMessage("table_create", TMessageType.Call, seqid_));
        table_create_args args = new table_create_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_table_create()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_create_result result = new table_create_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void alter_table(long ns, string table_name, string schema)
      {
        send_alter_table(ns, table_name, schema);
        recv_alter_table();
      }

      public void send_alter_table(long ns, string table_name, string schema)
      {
        oprot_.WriteMessageBegin(new TMessage("alter_table", TMessageType.Call, seqid_));
        alter_table_args args = new alter_table_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_alter_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        alter_table_result result = new alter_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void table_alter(long ns, string table_name, string schema)
      {
        send_table_alter(ns, table_name, schema);
        recv_table_alter();
      }

      public void send_table_alter(long ns, string table_name, string schema)
      {
        oprot_.WriteMessageBegin(new TMessage("table_alter", TMessageType.Call, seqid_));
        table_alter_args args = new table_alter_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_table_alter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_alter_result result = new table_alter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void refresh_table(long ns, string table_name)
      {
        send_refresh_table(ns, table_name);
        recv_refresh_table();
      }

      public void send_refresh_table(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("refresh_table", TMessageType.Call, seqid_));
        refresh_table_args args = new refresh_table_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_refresh_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refresh_table_result result = new refresh_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public long namespace_open(string ns)
      {
        send_namespace_open(ns);
        return recv_namespace_open();
      }

      public void send_namespace_open(string ns)
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_open", TMessageType.Call, seqid_));
        namespace_open_args args = new namespace_open_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_namespace_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_open_result result = new namespace_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "namespace_open failed: unknown result");
      }

      public long open_namespace(string ns)
      {
        send_open_namespace(ns);
        return recv_open_namespace();
      }

      public void send_open_namespace(string ns)
      {
        oprot_.WriteMessageBegin(new TMessage("open_namespace", TMessageType.Call, seqid_));
        open_namespace_args args = new open_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_open_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_namespace_result result = new open_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_namespace failed: unknown result");
      }

      public void namespace_close(long ns)
      {
        send_namespace_close(ns);
        recv_namespace_close();
      }

      public void send_namespace_close(long ns)
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_close", TMessageType.Call, seqid_));
        namespace_close_args args = new namespace_close_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_namespace_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_close_result result = new namespace_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void close_namespace(long ns)
      {
        send_close_namespace(ns);
        recv_close_namespace();
      }

      public void send_close_namespace(long ns)
      {
        oprot_.WriteMessageBegin(new TMessage("close_namespace", TMessageType.Call, seqid_));
        close_namespace_args args = new close_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_close_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_namespace_result result = new close_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public long future_open(int capacity)
      {
        send_future_open(capacity);
        return recv_future_open();
      }

      public void send_future_open(int capacity)
      {
        oprot_.WriteMessageBegin(new TMessage("future_open", TMessageType.Call, seqid_));
        future_open_args args = new future_open_args();
        args.Capacity = capacity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_future_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_open_result result = new future_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_open failed: unknown result");
      }

      public long open_future(int capacity)
      {
        send_open_future(capacity);
        return recv_open_future();
      }

      public void send_open_future(int capacity)
      {
        oprot_.WriteMessageBegin(new TMessage("open_future", TMessageType.Call, seqid_));
        open_future_args args = new open_future_args();
        args.Capacity = capacity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_open_future()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_future_result result = new open_future_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_future failed: unknown result");
      }

      public void future_cancel(long ff)
      {
        send_future_cancel(ff);
        recv_future_cancel();
      }

      public void send_future_cancel(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("future_cancel", TMessageType.Call, seqid_));
        future_cancel_args args = new future_cancel_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_future_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_cancel_result result = new future_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void cancel_future(long ff)
      {
        send_cancel_future(ff);
        recv_cancel_future();
      }

      public void send_cancel_future(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_future", TMessageType.Call, seqid_));
        cancel_future_args args = new cancel_future_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_cancel_future()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_future_result result = new cancel_future_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public Result future_get_result(long ff, int timeout_millis)
      {
        send_future_get_result(ff, timeout_millis);
        return recv_future_get_result();
      }

      public void send_future_get_result(long ff, int timeout_millis)
      {
        oprot_.WriteMessageBegin(new TMessage("future_get_result", TMessageType.Call, seqid_));
        future_get_result_args args = new future_get_result_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Result recv_future_get_result()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_get_result_result result = new future_get_result_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_get_result failed: unknown result");
      }

      public Result get_future_result(long ff, int timeout_millis)
      {
        send_get_future_result(ff, timeout_millis);
        return recv_get_future_result();
      }

      public void send_get_future_result(long ff, int timeout_millis)
      {
        oprot_.WriteMessageBegin(new TMessage("get_future_result", TMessageType.Call, seqid_));
        get_future_result_args args = new get_future_result_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Result recv_get_future_result()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_future_result_result result = new get_future_result_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_future_result failed: unknown result");
      }

      public ResultAsArrays future_get_result_as_arrays(long ff, int timeout_millis)
      {
        send_future_get_result_as_arrays(ff, timeout_millis);
        return recv_future_get_result_as_arrays();
      }

      public void send_future_get_result_as_arrays(long ff, int timeout_millis)
      {
        oprot_.WriteMessageBegin(new TMessage("future_get_result_as_arrays", TMessageType.Call, seqid_));
        future_get_result_as_arrays_args args = new future_get_result_as_arrays_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ResultAsArrays recv_future_get_result_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_get_result_as_arrays_result result = new future_get_result_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_get_result_as_arrays failed: unknown result");
      }

      public ResultAsArrays get_future_result_as_arrays(long ff, int timeout_millis)
      {
        send_get_future_result_as_arrays(ff, timeout_millis);
        return recv_get_future_result_as_arrays();
      }

      public void send_get_future_result_as_arrays(long ff, int timeout_millis)
      {
        oprot_.WriteMessageBegin(new TMessage("get_future_result_as_arrays", TMessageType.Call, seqid_));
        get_future_result_as_arrays_args args = new get_future_result_as_arrays_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ResultAsArrays recv_get_future_result_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_future_result_as_arrays_result result = new get_future_result_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_future_result_as_arrays failed: unknown result");
      }

      public ResultSerialized future_get_result_serialized(long ff, int timeout_millis)
      {
        send_future_get_result_serialized(ff, timeout_millis);
        return recv_future_get_result_serialized();
      }

      public void send_future_get_result_serialized(long ff, int timeout_millis)
      {
        oprot_.WriteMessageBegin(new TMessage("future_get_result_serialized", TMessageType.Call, seqid_));
        future_get_result_serialized_args args = new future_get_result_serialized_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ResultSerialized recv_future_get_result_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_get_result_serialized_result result = new future_get_result_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_get_result_serialized failed: unknown result");
      }

      public ResultSerialized get_future_result_serialized(long ff, int timeout_millis)
      {
        send_get_future_result_serialized(ff, timeout_millis);
        return recv_get_future_result_serialized();
      }

      public void send_get_future_result_serialized(long ff, int timeout_millis)
      {
        oprot_.WriteMessageBegin(new TMessage("get_future_result_serialized", TMessageType.Call, seqid_));
        get_future_result_serialized_args args = new get_future_result_serialized_args();
        args.Ff = ff;
        args.Timeout_millis = timeout_millis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ResultSerialized recv_get_future_result_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_future_result_serialized_result result = new get_future_result_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_future_result_serialized failed: unknown result");
      }

      public bool future_is_empty(long ff)
      {
        send_future_is_empty(ff);
        return recv_future_is_empty();
      }

      public void send_future_is_empty(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("future_is_empty", TMessageType.Call, seqid_));
        future_is_empty_args args = new future_is_empty_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_future_is_empty()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_is_empty_result result = new future_is_empty_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_is_empty failed: unknown result");
      }

      public bool future_is_full(long ff)
      {
        send_future_is_full(ff);
        return recv_future_is_full();
      }

      public void send_future_is_full(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("future_is_full", TMessageType.Call, seqid_));
        future_is_full_args args = new future_is_full_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_future_is_full()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_is_full_result result = new future_is_full_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_is_full failed: unknown result");
      }

      public bool future_is_cancelled(long ff)
      {
        send_future_is_cancelled(ff);
        return recv_future_is_cancelled();
      }

      public void send_future_is_cancelled(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("future_is_cancelled", TMessageType.Call, seqid_));
        future_is_cancelled_args args = new future_is_cancelled_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_future_is_cancelled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_is_cancelled_result result = new future_is_cancelled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_is_cancelled failed: unknown result");
      }

      public bool future_has_outstanding(long ff)
      {
        send_future_has_outstanding(ff);
        return recv_future_has_outstanding();
      }

      public void send_future_has_outstanding(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("future_has_outstanding", TMessageType.Call, seqid_));
        future_has_outstanding_args args = new future_has_outstanding_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_future_has_outstanding()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_has_outstanding_result result = new future_has_outstanding_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "future_has_outstanding failed: unknown result");
      }

      public void future_close(long ff)
      {
        send_future_close(ff);
        recv_future_close();
      }

      public void send_future_close(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("future_close", TMessageType.Call, seqid_));
        future_close_args args = new future_close_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_future_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        future_close_result result = new future_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void close_future(long ff)
      {
        send_close_future(ff);
        recv_close_future();
      }

      public void send_close_future(long ff)
      {
        oprot_.WriteMessageBegin(new TMessage("close_future", TMessageType.Call, seqid_));
        close_future_args args = new close_future_args();
        args.Ff = ff;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_close_future()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_future_result result = new close_future_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public long scanner_open(long ns, string table_name, ScanSpec scan_spec)
      {
        send_scanner_open(ns, table_name, scan_spec);
        return recv_scanner_open();
      }

      public void send_scanner_open(long ns, string table_name, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_open", TMessageType.Call, seqid_));
        scanner_open_args args = new scanner_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_scanner_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_open_result result = new scanner_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_open failed: unknown result");
      }

      public long open_scanner(long ns, string table_name, ScanSpec scan_spec)
      {
        send_open_scanner(ns, table_name, scan_spec);
        return recv_open_scanner();
      }

      public void send_open_scanner(long ns, string table_name, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("open_scanner", TMessageType.Call, seqid_));
        open_scanner_args args = new open_scanner_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_open_scanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_scanner_result result = new open_scanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_scanner failed: unknown result");
      }

      public long async_scanner_open(long ns, string table_name, long future, ScanSpec scan_spec)
      {
        send_async_scanner_open(ns, table_name, future, scan_spec);
        return recv_async_scanner_open();
      }

      public void send_async_scanner_open(long ns, string table_name, long future, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("async_scanner_open", TMessageType.Call, seqid_));
        async_scanner_open_args args = new async_scanner_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_async_scanner_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_scanner_open_result result = new async_scanner_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "async_scanner_open failed: unknown result");
      }

      public long open_scanner_async(long ns, string table_name, long future, ScanSpec scan_spec)
      {
        send_open_scanner_async(ns, table_name, future, scan_spec);
        return recv_open_scanner_async();
      }

      public void send_open_scanner_async(long ns, string table_name, long future, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("open_scanner_async", TMessageType.Call, seqid_));
        open_scanner_async_args args = new open_scanner_async_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_open_scanner_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_scanner_async_result result = new open_scanner_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_scanner_async failed: unknown result");
      }

      public void scanner_close(long scanner)
      {
        send_scanner_close(scanner);
        recv_scanner_close();
      }

      public void send_scanner_close(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_close", TMessageType.Call, seqid_));
        scanner_close_args args = new scanner_close_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_scanner_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_close_result result = new scanner_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void close_scanner(long scanner)
      {
        send_close_scanner(scanner);
        recv_close_scanner();
      }

      public void send_close_scanner(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("close_scanner", TMessageType.Call, seqid_));
        close_scanner_args args = new close_scanner_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_close_scanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_scanner_result result = new close_scanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_scanner_cancel(long scanner)
      {
        send_async_scanner_cancel(scanner);
        recv_async_scanner_cancel();
      }

      public void send_async_scanner_cancel(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("async_scanner_cancel", TMessageType.Call, seqid_));
        async_scanner_cancel_args args = new async_scanner_cancel_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_scanner_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_scanner_cancel_result result = new async_scanner_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void cancel_scanner_async(long scanner)
      {
        send_cancel_scanner_async(scanner);
        recv_cancel_scanner_async();
      }

      public void send_cancel_scanner_async(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_scanner_async", TMessageType.Call, seqid_));
        cancel_scanner_async_args args = new cancel_scanner_async_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_cancel_scanner_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_scanner_async_result result = new cancel_scanner_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_scanner_close(long scanner)
      {
        send_async_scanner_close(scanner);
        recv_async_scanner_close();
      }

      public void send_async_scanner_close(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("async_scanner_close", TMessageType.Call, seqid_));
        async_scanner_close_args args = new async_scanner_close_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_scanner_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_scanner_close_result result = new async_scanner_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void close_scanner_async(long scanner)
      {
        send_close_scanner_async(scanner);
        recv_close_scanner_async();
      }

      public void send_close_scanner_async(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("close_scanner_async", TMessageType.Call, seqid_));
        close_scanner_async_args args = new close_scanner_async_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_close_scanner_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_scanner_async_result result = new close_scanner_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public List<Cell> scanner_get_cells(long scanner)
      {
        send_scanner_get_cells(scanner);
        return recv_scanner_get_cells();
      }

      public void send_scanner_get_cells(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_cells", TMessageType.Call, seqid_));
        scanner_get_cells_args args = new scanner_get_cells_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Cell> recv_scanner_get_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_cells_result result = new scanner_get_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_cells failed: unknown result");
      }

      public List<Cell> next_cells(long scanner)
      {
        send_next_cells(scanner);
        return recv_next_cells();
      }

      public void send_next_cells(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("next_cells", TMessageType.Call, seqid_));
        next_cells_args args = new next_cells_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Cell> recv_next_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_cells_result result = new next_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_cells failed: unknown result");
      }

      public List<List<string>> scanner_get_cells_as_arrays(long scanner)
      {
        send_scanner_get_cells_as_arrays(scanner);
        return recv_scanner_get_cells_as_arrays();
      }

      public void send_scanner_get_cells_as_arrays(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_cells_as_arrays", TMessageType.Call, seqid_));
        scanner_get_cells_as_arrays_args args = new scanner_get_cells_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<List<string>> recv_scanner_get_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_cells_as_arrays_result result = new scanner_get_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_cells_as_arrays failed: unknown result");
      }

      public List<List<string>> next_cells_as_arrays(long scanner)
      {
        send_next_cells_as_arrays(scanner);
        return recv_next_cells_as_arrays();
      }

      public void send_next_cells_as_arrays(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("next_cells_as_arrays", TMessageType.Call, seqid_));
        next_cells_as_arrays_args args = new next_cells_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<List<string>> recv_next_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_cells_as_arrays_result result = new next_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_cells_as_arrays failed: unknown result");
      }

      public byte[] scanner_get_cells_serialized(long scanner)
      {
        send_scanner_get_cells_serialized(scanner);
        return recv_scanner_get_cells_serialized();
      }

      public void send_scanner_get_cells_serialized(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_cells_serialized", TMessageType.Call, seqid_));
        scanner_get_cells_serialized_args args = new scanner_get_cells_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_scanner_get_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_cells_serialized_result result = new scanner_get_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_cells_serialized failed: unknown result");
      }

      public byte[] next_cells_serialized(long scanner)
      {
        send_next_cells_serialized(scanner);
        return recv_next_cells_serialized();
      }

      public void send_next_cells_serialized(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("next_cells_serialized", TMessageType.Call, seqid_));
        next_cells_serialized_args args = new next_cells_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_next_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_cells_serialized_result result = new next_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_cells_serialized failed: unknown result");
      }

      public List<Cell> scanner_get_row(long scanner)
      {
        send_scanner_get_row(scanner);
        return recv_scanner_get_row();
      }

      public void send_scanner_get_row(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_row", TMessageType.Call, seqid_));
        scanner_get_row_args args = new scanner_get_row_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Cell> recv_scanner_get_row()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_row_result result = new scanner_get_row_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_row failed: unknown result");
      }

      public List<Cell> next_row(long scanner)
      {
        send_next_row(scanner);
        return recv_next_row();
      }

      public void send_next_row(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("next_row", TMessageType.Call, seqid_));
        next_row_args args = new next_row_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Cell> recv_next_row()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_row_result result = new next_row_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_row failed: unknown result");
      }

      public List<List<string>> scanner_get_row_as_arrays(long scanner)
      {
        send_scanner_get_row_as_arrays(scanner);
        return recv_scanner_get_row_as_arrays();
      }

      public void send_scanner_get_row_as_arrays(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_row_as_arrays", TMessageType.Call, seqid_));
        scanner_get_row_as_arrays_args args = new scanner_get_row_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<List<string>> recv_scanner_get_row_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_row_as_arrays_result result = new scanner_get_row_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_row_as_arrays failed: unknown result");
      }

      public List<List<string>> next_row_as_arrays(long scanner)
      {
        send_next_row_as_arrays(scanner);
        return recv_next_row_as_arrays();
      }

      public void send_next_row_as_arrays(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("next_row_as_arrays", TMessageType.Call, seqid_));
        next_row_as_arrays_args args = new next_row_as_arrays_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<List<string>> recv_next_row_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_row_as_arrays_result result = new next_row_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_row_as_arrays failed: unknown result");
      }

      public byte[] scanner_get_row_serialized(long scanner)
      {
        send_scanner_get_row_serialized(scanner);
        return recv_scanner_get_row_serialized();
      }

      public void send_scanner_get_row_serialized(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("scanner_get_row_serialized", TMessageType.Call, seqid_));
        scanner_get_row_serialized_args args = new scanner_get_row_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_scanner_get_row_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scanner_get_row_serialized_result result = new scanner_get_row_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanner_get_row_serialized failed: unknown result");
      }

      public byte[] next_row_serialized(long scanner)
      {
        send_next_row_serialized(scanner);
        return recv_next_row_serialized();
      }

      public void send_next_row_serialized(long scanner)
      {
        oprot_.WriteMessageBegin(new TMessage("next_row_serialized", TMessageType.Call, seqid_));
        next_row_serialized_args args = new next_row_serialized_args();
        args.Scanner = scanner;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_next_row_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        next_row_serialized_result result = new next_row_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "next_row_serialized failed: unknown result");
      }

      public List<Cell> get_row(long ns, string table_name, string row)
      {
        send_get_row(ns, table_name, row);
        return recv_get_row();
      }

      public void send_get_row(long ns, string table_name, string row)
      {
        oprot_.WriteMessageBegin(new TMessage("get_row", TMessageType.Call, seqid_));
        get_row_args args = new get_row_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Cell> recv_get_row()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_row_result result = new get_row_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_row failed: unknown result");
      }

      public List<List<string>> get_row_as_arrays(long ns, string name, string row)
      {
        send_get_row_as_arrays(ns, name, row);
        return recv_get_row_as_arrays();
      }

      public void send_get_row_as_arrays(long ns, string name, string row)
      {
        oprot_.WriteMessageBegin(new TMessage("get_row_as_arrays", TMessageType.Call, seqid_));
        get_row_as_arrays_args args = new get_row_as_arrays_args();
        args.Ns = ns;
        args.Name = name;
        args.Row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<List<string>> recv_get_row_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_row_as_arrays_result result = new get_row_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_row_as_arrays failed: unknown result");
      }

      public byte[] get_row_serialized(long ns, string table_name, string row)
      {
        send_get_row_serialized(ns, table_name, row);
        return recv_get_row_serialized();
      }

      public void send_get_row_serialized(long ns, string table_name, string row)
      {
        oprot_.WriteMessageBegin(new TMessage("get_row_serialized", TMessageType.Call, seqid_));
        get_row_serialized_args args = new get_row_serialized_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_get_row_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_row_serialized_result result = new get_row_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_row_serialized failed: unknown result");
      }

      public byte[] get_cell(long ns, string table_name, string row, string column)
      {
        send_get_cell(ns, table_name, row, column);
        return recv_get_cell();
      }

      public void send_get_cell(long ns, string table_name, string row, string column)
      {
        oprot_.WriteMessageBegin(new TMessage("get_cell", TMessageType.Call, seqid_));
        get_cell_args args = new get_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Row = row;
        args.Column = column;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_get_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cell_result result = new get_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cell failed: unknown result");
      }

      public List<Cell> get_cells(long ns, string table_name, ScanSpec scan_spec)
      {
        send_get_cells(ns, table_name, scan_spec);
        return recv_get_cells();
      }

      public void send_get_cells(long ns, string table_name, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("get_cells", TMessageType.Call, seqid_));
        get_cells_args args = new get_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Cell> recv_get_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cells_result result = new get_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cells failed: unknown result");
      }

      public List<List<string>> get_cells_as_arrays(long ns, string name, ScanSpec scan_spec)
      {
        send_get_cells_as_arrays(ns, name, scan_spec);
        return recv_get_cells_as_arrays();
      }

      public void send_get_cells_as_arrays(long ns, string name, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("get_cells_as_arrays", TMessageType.Call, seqid_));
        get_cells_as_arrays_args args = new get_cells_as_arrays_args();
        args.Ns = ns;
        args.Name = name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<List<string>> recv_get_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cells_as_arrays_result result = new get_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cells_as_arrays failed: unknown result");
      }

      public byte[] get_cells_serialized(long ns, string name, ScanSpec scan_spec)
      {
        send_get_cells_serialized(ns, name, scan_spec);
        return recv_get_cells_serialized();
      }

      public void send_get_cells_serialized(long ns, string name, ScanSpec scan_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("get_cells_serialized", TMessageType.Call, seqid_));
        get_cells_serialized_args args = new get_cells_serialized_args();
        args.Ns = ns;
        args.Name = name;
        args.Scan_spec = scan_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public byte[] recv_get_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_cells_serialized_result result = new get_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_cells_serialized failed: unknown result");
      }

      public void shared_mutator_refresh(long ns, string table_name, MutateSpec mutate_spec)
      {
        send_shared_mutator_refresh(ns, table_name, mutate_spec);
        recv_shared_mutator_refresh();
      }

      public void send_shared_mutator_refresh(long ns, string table_name, MutateSpec mutate_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_refresh", TMessageType.Call, seqid_));
        shared_mutator_refresh_args args = new shared_mutator_refresh_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_shared_mutator_refresh()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_refresh_result result = new shared_mutator_refresh_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void refresh_shared_mutator(long ns, string table_name, MutateSpec mutate_spec)
      {
        send_refresh_shared_mutator(ns, table_name, mutate_spec);
        recv_refresh_shared_mutator();
      }

      public void send_refresh_shared_mutator(long ns, string table_name, MutateSpec mutate_spec)
      {
        oprot_.WriteMessageBegin(new TMessage("refresh_shared_mutator", TMessageType.Call, seqid_));
        refresh_shared_mutator_args args = new refresh_shared_mutator_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_refresh_shared_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refresh_shared_mutator_result result = new refresh_shared_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void shared_mutator_set_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
        recv_shared_mutator_set_cells();
      }

      public void send_shared_mutator_set_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cells", TMessageType.Call, seqid_));
        shared_mutator_set_cells_args args = new shared_mutator_set_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_shared_mutator_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cells_result result = new shared_mutator_set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void offer_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        send_offer_cells(ns, table_name, mutate_spec, cells);
        recv_offer_cells();
      }

      public void send_offer_cells(long ns, string table_name, MutateSpec mutate_spec, List<Cell> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cells", TMessageType.Call, seqid_));
        offer_cells_args args = new offer_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_offer_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cells_result result = new offer_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void shared_mutator_set_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
        recv_shared_mutator_set_cells_as_arrays();
      }

      public void send_shared_mutator_set_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cells_as_arrays", TMessageType.Call, seqid_));
        shared_mutator_set_cells_as_arrays_args args = new shared_mutator_set_cells_as_arrays_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_shared_mutator_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cells_as_arrays_result result = new shared_mutator_set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void offer_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
        recv_offer_cells_as_arrays();
      }

      public void send_offer_cells_as_arrays(long ns, string table_name, MutateSpec mutate_spec, List<List<string>> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cells_as_arrays", TMessageType.Call, seqid_));
        offer_cells_as_arrays_args args = new offer_cells_as_arrays_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_offer_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cells_as_arrays_result result = new offer_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void shared_mutator_set_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
        recv_shared_mutator_set_cell();
      }

      public void send_shared_mutator_set_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cell", TMessageType.Call, seqid_));
        shared_mutator_set_cell_args args = new shared_mutator_set_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_shared_mutator_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cell_result result = new shared_mutator_set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void offer_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        send_offer_cell(ns, table_name, mutate_spec, cell);
        recv_offer_cell();
      }

      public void send_offer_cell(long ns, string table_name, MutateSpec mutate_spec, Cell cell)
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cell", TMessageType.Call, seqid_));
        offer_cell_args args = new offer_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_offer_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cell_result result = new offer_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void shared_mutator_set_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
        recv_shared_mutator_set_cell_as_array();
      }

      public void send_shared_mutator_set_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        oprot_.WriteMessageBegin(new TMessage("shared_mutator_set_cell_as_array", TMessageType.Call, seqid_));
        shared_mutator_set_cell_as_array_args args = new shared_mutator_set_cell_as_array_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_shared_mutator_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        shared_mutator_set_cell_as_array_result result = new shared_mutator_set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void offer_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
        recv_offer_cell_as_array();
      }

      public void send_offer_cell_as_array(long ns, string table_name, MutateSpec mutate_spec, List<string> cell)
      {
        oprot_.WriteMessageBegin(new TMessage("offer_cell_as_array", TMessageType.Call, seqid_));
        offer_cell_as_array_args args = new offer_cell_as_array_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Mutate_spec = mutate_spec;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_offer_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        offer_cell_as_array_result result = new offer_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public long mutator_open(long ns, string table_name, int flags, int flush_interval)
      {
        send_mutator_open(ns, table_name, flags, flush_interval);
        return recv_mutator_open();
      }

      public void send_mutator_open(long ns, string table_name, int flags, int flush_interval)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_open", TMessageType.Call, seqid_));
        mutator_open_args args = new mutator_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Flags = flags;
        args.Flush_interval = flush_interval;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_mutator_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_open_result result = new mutator_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mutator_open failed: unknown result");
      }

      public long open_mutator(long ns, string table_name, int flags, int flush_interval)
      {
        send_open_mutator(ns, table_name, flags, flush_interval);
        return recv_open_mutator();
      }

      public void send_open_mutator(long ns, string table_name, int flags, int flush_interval)
      {
        oprot_.WriteMessageBegin(new TMessage("open_mutator", TMessageType.Call, seqid_));
        open_mutator_args args = new open_mutator_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Flags = flags;
        args.Flush_interval = flush_interval;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_open_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_mutator_result result = new open_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_mutator failed: unknown result");
      }

      public long async_mutator_open(long ns, string table_name, long future, int flags)
      {
        send_async_mutator_open(ns, table_name, future, flags);
        return recv_async_mutator_open();
      }

      public void send_async_mutator_open(long ns, string table_name, long future, int flags)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_open", TMessageType.Call, seqid_));
        async_mutator_open_args args = new async_mutator_open_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Flags = flags;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_async_mutator_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_open_result result = new async_mutator_open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "async_mutator_open failed: unknown result");
      }

      public long open_mutator_async(long ns, string table_name, long future, int flags)
      {
        send_open_mutator_async(ns, table_name, future, flags);
        return recv_open_mutator_async();
      }

      public void send_open_mutator_async(long ns, string table_name, long future, int flags)
      {
        oprot_.WriteMessageBegin(new TMessage("open_mutator_async", TMessageType.Call, seqid_));
        open_mutator_async_args args = new open_mutator_async_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Future = future;
        args.Flags = flags;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public long recv_open_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_mutator_async_result result = new open_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open_mutator_async failed: unknown result");
      }

      public void mutator_close(long mutator)
      {
        send_mutator_close(mutator);
        recv_mutator_close();
      }

      public void send_mutator_close(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_close", TMessageType.Call, seqid_));
        mutator_close_args args = new mutator_close_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_close_result result = new mutator_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void close_mutator(long mutator)
      {
        send_close_mutator(mutator);
        recv_close_mutator();
      }

      public void send_close_mutator(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("close_mutator", TMessageType.Call, seqid_));
        close_mutator_args args = new close_mutator_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_close_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_mutator_result result = new close_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_cancel(long mutator)
      {
        send_async_mutator_cancel(mutator);
        recv_async_mutator_cancel();
      }

      public void send_async_mutator_cancel(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_cancel", TMessageType.Call, seqid_));
        async_mutator_cancel_args args = new async_mutator_cancel_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_cancel_result result = new async_mutator_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void cancel_mutator_async(long mutator)
      {
        send_cancel_mutator_async(mutator);
        recv_cancel_mutator_async();
      }

      public void send_cancel_mutator_async(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("cancel_mutator_async", TMessageType.Call, seqid_));
        cancel_mutator_async_args args = new cancel_mutator_async_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_cancel_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_mutator_async_result result = new cancel_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_close(long mutator)
      {
        send_async_mutator_close(mutator);
        recv_async_mutator_close();
      }

      public void send_async_mutator_close(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_close", TMessageType.Call, seqid_));
        async_mutator_close_args args = new async_mutator_close_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_close_result result = new async_mutator_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void close_mutator_async(long mutator)
      {
        send_close_mutator_async(mutator);
        recv_close_mutator_async();
      }

      public void send_close_mutator_async(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("close_mutator_async", TMessageType.Call, seqid_));
        close_mutator_async_args args = new close_mutator_async_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_close_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_mutator_async_result result = new close_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void mutator_set_cell(long mutator, Cell cell)
      {
        send_mutator_set_cell(mutator, cell);
        recv_mutator_set_cell();
      }

      public void send_mutator_set_cell(long mutator, Cell cell)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cell", TMessageType.Call, seqid_));
        mutator_set_cell_args args = new mutator_set_cell_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cell_result result = new mutator_set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cell(long ns, string table_name, Cell cell)
      {
        send_set_cell(ns, table_name, cell);
        recv_set_cell();
      }

      public void send_set_cell(long ns, string table_name, Cell cell)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell", TMessageType.Call, seqid_));
        set_cell_args args = new set_cell_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_result result = new set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void mutator_set_cell_as_array(long mutator, List<string> cell)
      {
        send_mutator_set_cell_as_array(mutator, cell);
        recv_mutator_set_cell_as_array();
      }

      public void send_mutator_set_cell_as_array(long mutator, List<string> cell)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cell_as_array", TMessageType.Call, seqid_));
        mutator_set_cell_as_array_args args = new mutator_set_cell_as_array_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cell_as_array_result result = new mutator_set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cell_as_array(long ns, string table_name, List<string> cell)
      {
        send_set_cell_as_array(ns, table_name, cell);
        recv_set_cell_as_array();
      }

      public void send_set_cell_as_array(long ns, string table_name, List<string> cell)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell_as_array", TMessageType.Call, seqid_));
        set_cell_as_array_args args = new set_cell_as_array_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_as_array_result result = new set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void mutator_set_cells(long mutator, List<Cell> cells)
      {
        send_mutator_set_cells(mutator, cells);
        recv_mutator_set_cells();
      }

      public void send_mutator_set_cells(long mutator, List<Cell> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cells", TMessageType.Call, seqid_));
        mutator_set_cells_args args = new mutator_set_cells_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cells_result result = new mutator_set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cells(long ns, string table_name, List<Cell> cells)
      {
        send_set_cells(ns, table_name, cells);
        recv_set_cells();
      }

      public void send_set_cells(long ns, string table_name, List<Cell> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells", TMessageType.Call, seqid_));
        set_cells_args args = new set_cells_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_result result = new set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      {
        send_mutator_set_cells_as_arrays(mutator, cells);
        recv_mutator_set_cells_as_arrays();
      }

      public void send_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cells_as_arrays", TMessageType.Call, seqid_));
        mutator_set_cells_as_arrays_args args = new mutator_set_cells_as_arrays_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cells_as_arrays_result result = new mutator_set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cells_as_arrays(long ns, string table_name, List<List<string>> cells)
      {
        send_set_cells_as_arrays(ns, table_name, cells);
        recv_set_cells_as_arrays();
      }

      public void send_set_cells_as_arrays(long ns, string table_name, List<List<string>> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_as_arrays", TMessageType.Call, seqid_));
        set_cells_as_arrays_args args = new set_cells_as_arrays_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_as_arrays_result result = new set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      {
        send_mutator_set_cells_serialized(mutator, cells, flush);
        recv_mutator_set_cells_serialized();
      }

      public void send_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_set_cells_serialized", TMessageType.Call, seqid_));
        mutator_set_cells_serialized_args args = new mutator_set_cells_serialized_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Flush = flush;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_set_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_set_cells_serialized_result result = new mutator_set_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cells_serialized(long ns, string table_name, byte[] cells)
      {
        send_set_cells_serialized(ns, table_name, cells);
        recv_set_cells_serialized();
      }

      public void send_set_cells_serialized(long ns, string table_name, byte[] cells)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_serialized", TMessageType.Call, seqid_));
        set_cells_serialized_args args = new set_cells_serialized_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_serialized_result result = new set_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void mutator_flush(long mutator)
      {
        send_mutator_flush(mutator);
        recv_mutator_flush();
      }

      public void send_mutator_flush(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("mutator_flush", TMessageType.Call, seqid_));
        mutator_flush_args args = new mutator_flush_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutator_flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutator_flush_result result = new mutator_flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void flush_mutator(long mutator)
      {
        send_flush_mutator(mutator);
        recv_flush_mutator();
      }

      public void send_flush_mutator(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("flush_mutator", TMessageType.Call, seqid_));
        flush_mutator_args args = new flush_mutator_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_flush_mutator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flush_mutator_result result = new flush_mutator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_set_cell(long mutator, Cell cell)
      {
        send_async_mutator_set_cell(mutator, cell);
        recv_async_mutator_set_cell();
      }

      public void send_async_mutator_set_cell(long mutator, Cell cell)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cell", TMessageType.Call, seqid_));
        async_mutator_set_cell_args args = new async_mutator_set_cell_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_set_cell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cell_result result = new async_mutator_set_cell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cell_async(long mutator, Cell cell)
      {
        send_set_cell_async(mutator, cell);
        recv_set_cell_async();
      }

      public void send_set_cell_async(long mutator, Cell cell)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell_async", TMessageType.Call, seqid_));
        set_cell_async_args args = new set_cell_async_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cell_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_async_result result = new set_cell_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_set_cell_as_array(long mutator, List<string> cell)
      {
        send_async_mutator_set_cell_as_array(mutator, cell);
        recv_async_mutator_set_cell_as_array();
      }

      public void send_async_mutator_set_cell_as_array(long mutator, List<string> cell)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cell_as_array", TMessageType.Call, seqid_));
        async_mutator_set_cell_as_array_args args = new async_mutator_set_cell_as_array_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_set_cell_as_array()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cell_as_array_result result = new async_mutator_set_cell_as_array_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cell_as_array_async(long mutator, List<string> cell)
      {
        send_set_cell_as_array_async(mutator, cell);
        recv_set_cell_as_array_async();
      }

      public void send_set_cell_as_array_async(long mutator, List<string> cell)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cell_as_array_async", TMessageType.Call, seqid_));
        set_cell_as_array_async_args args = new set_cell_as_array_async_args();
        args.Mutator = mutator;
        args.Cell = cell;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cell_as_array_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cell_as_array_async_result result = new set_cell_as_array_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_set_cells(long mutator, List<Cell> cells)
      {
        send_async_mutator_set_cells(mutator, cells);
        recv_async_mutator_set_cells();
      }

      public void send_async_mutator_set_cells(long mutator, List<Cell> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cells", TMessageType.Call, seqid_));
        async_mutator_set_cells_args args = new async_mutator_set_cells_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_set_cells()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cells_result result = new async_mutator_set_cells_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cells_async(long mutator, List<Cell> cells)
      {
        send_set_cells_async(mutator, cells);
        recv_set_cells_async();
      }

      public void send_set_cells_async(long mutator, List<Cell> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_async", TMessageType.Call, seqid_));
        set_cells_async_args args = new set_cells_async_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cells_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_async_result result = new set_cells_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      {
        send_async_mutator_set_cells_as_arrays(mutator, cells);
        recv_async_mutator_set_cells_as_arrays();
      }

      public void send_async_mutator_set_cells_as_arrays(long mutator, List<List<string>> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cells_as_arrays", TMessageType.Call, seqid_));
        async_mutator_set_cells_as_arrays_args args = new async_mutator_set_cells_as_arrays_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_set_cells_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cells_as_arrays_result result = new async_mutator_set_cells_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cells_as_arrays_async(long mutator, List<List<string>> cells)
      {
        send_set_cells_as_arrays_async(mutator, cells);
        recv_set_cells_as_arrays_async();
      }

      public void send_set_cells_as_arrays_async(long mutator, List<List<string>> cells)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_as_arrays_async", TMessageType.Call, seqid_));
        set_cells_as_arrays_async_args args = new set_cells_as_arrays_async_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cells_as_arrays_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_as_arrays_async_result result = new set_cells_as_arrays_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      {
        send_async_mutator_set_cells_serialized(mutator, cells, flush);
        recv_async_mutator_set_cells_serialized();
      }

      public void send_async_mutator_set_cells_serialized(long mutator, byte[] cells, bool flush)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_set_cells_serialized", TMessageType.Call, seqid_));
        async_mutator_set_cells_serialized_args args = new async_mutator_set_cells_serialized_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Flush = flush;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_set_cells_serialized()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_set_cells_serialized_result result = new async_mutator_set_cells_serialized_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void set_cells_serialized_async(long mutator, byte[] cells, bool flush)
      {
        send_set_cells_serialized_async(mutator, cells, flush);
        recv_set_cells_serialized_async();
      }

      public void send_set_cells_serialized_async(long mutator, byte[] cells, bool flush)
      {
        oprot_.WriteMessageBegin(new TMessage("set_cells_serialized_async", TMessageType.Call, seqid_));
        set_cells_serialized_async_args args = new set_cells_serialized_async_args();
        args.Mutator = mutator;
        args.Cells = cells;
        args.Flush = flush;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_set_cells_serialized_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        set_cells_serialized_async_result result = new set_cells_serialized_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void async_mutator_flush(long mutator)
      {
        send_async_mutator_flush(mutator);
        recv_async_mutator_flush();
      }

      public void send_async_mutator_flush(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("async_mutator_flush", TMessageType.Call, seqid_));
        async_mutator_flush_args args = new async_mutator_flush_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_async_mutator_flush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        async_mutator_flush_result result = new async_mutator_flush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void flush_mutator_async(long mutator)
      {
        send_flush_mutator_async(mutator);
        recv_flush_mutator_async();
      }

      public void send_flush_mutator_async(long mutator)
      {
        oprot_.WriteMessageBegin(new TMessage("flush_mutator_async", TMessageType.Call, seqid_));
        flush_mutator_async_args args = new flush_mutator_async_args();
        args.Mutator = mutator;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_flush_mutator_async()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flush_mutator_async_result result = new flush_mutator_async_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public bool namespace_exists(string ns)
      {
        send_namespace_exists(ns);
        return recv_namespace_exists();
      }

      public void send_namespace_exists(string ns)
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_exists", TMessageType.Call, seqid_));
        namespace_exists_args args = new namespace_exists_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_namespace_exists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_exists_result result = new namespace_exists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "namespace_exists failed: unknown result");
      }

      public bool exists_namespace(string ns)
      {
        send_exists_namespace(ns);
        return recv_exists_namespace();
      }

      public void send_exists_namespace(string ns)
      {
        oprot_.WriteMessageBegin(new TMessage("exists_namespace", TMessageType.Call, seqid_));
        exists_namespace_args args = new exists_namespace_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_exists_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        exists_namespace_result result = new exists_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists_namespace failed: unknown result");
      }

      public bool exists_table(long ns, string name)
      {
        send_exists_table(ns, name);
        return recv_exists_table();
      }

      public void send_exists_table(long ns, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("exists_table", TMessageType.Call, seqid_));
        exists_table_args args = new exists_table_args();
        args.Ns = ns;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_exists_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        exists_table_result result = new exists_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists_table failed: unknown result");
      }

      public bool table_exists(long ns, string name)
      {
        send_table_exists(ns, name);
        return recv_table_exists();
      }

      public void send_table_exists(long ns, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_exists", TMessageType.Call, seqid_));
        table_exists_args args = new table_exists_args();
        args.Ns = ns;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_table_exists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_exists_result result = new table_exists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_exists failed: unknown result");
      }

      public string table_get_id(long ns, string table_name)
      {
        send_table_get_id(ns, table_name);
        return recv_table_get_id();
      }

      public void send_table_get_id(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_id", TMessageType.Call, seqid_));
        table_get_id_args args = new table_get_id_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_table_get_id()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_id_result result = new table_get_id_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_id failed: unknown result");
      }

      public string get_table_id(long ns, string table_name)
      {
        send_get_table_id(ns, table_name);
        return recv_get_table_id();
      }

      public void send_get_table_id(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_table_id", TMessageType.Call, seqid_));
        get_table_id_args args = new get_table_id_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_table_id()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_table_id_result result = new get_table_id_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_id failed: unknown result");
      }

      public string table_get_schema_str(long ns, string table_name)
      {
        send_table_get_schema_str(ns, table_name);
        return recv_table_get_schema_str();
      }

      public void send_table_get_schema_str(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_schema_str", TMessageType.Call, seqid_));
        table_get_schema_str_args args = new table_get_schema_str_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_table_get_schema_str()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_schema_str_result result = new table_get_schema_str_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_schema_str failed: unknown result");
      }

      public string get_schema_str(long ns, string table_name)
      {
        send_get_schema_str(ns, table_name);
        return recv_get_schema_str();
      }

      public void send_get_schema_str(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema_str", TMessageType.Call, seqid_));
        get_schema_str_args args = new get_schema_str_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_schema_str()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_str_result result = new get_schema_str_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema_str failed: unknown result");
      }

      public string table_get_schema_str_with_ids(long ns, string table_name)
      {
        send_table_get_schema_str_with_ids(ns, table_name);
        return recv_table_get_schema_str_with_ids();
      }

      public void send_table_get_schema_str_with_ids(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_schema_str_with_ids", TMessageType.Call, seqid_));
        table_get_schema_str_with_ids_args args = new table_get_schema_str_with_ids_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_table_get_schema_str_with_ids()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_schema_str_with_ids_result result = new table_get_schema_str_with_ids_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_schema_str_with_ids failed: unknown result");
      }

      public string get_schema_str_with_ids(long ns, string table_name)
      {
        send_get_schema_str_with_ids(ns, table_name);
        return recv_get_schema_str_with_ids();
      }

      public void send_get_schema_str_with_ids(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema_str_with_ids", TMessageType.Call, seqid_));
        get_schema_str_with_ids_args args = new get_schema_str_with_ids_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_schema_str_with_ids()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_str_with_ids_result result = new get_schema_str_with_ids_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema_str_with_ids failed: unknown result");
      }

      public Schema table_get_schema(long ns, string table_name)
      {
        send_table_get_schema(ns, table_name);
        return recv_table_get_schema();
      }

      public void send_table_get_schema(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_schema", TMessageType.Call, seqid_));
        table_get_schema_args args = new table_get_schema_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Schema recv_table_get_schema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_schema_result result = new table_get_schema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_schema failed: unknown result");
      }

      public Schema get_schema(long ns, string table_name)
      {
        send_get_schema(ns, table_name);
        return recv_get_schema();
      }

      public void send_get_schema(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_schema", TMessageType.Call, seqid_));
        get_schema_args args = new get_schema_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Schema recv_get_schema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_schema_result result = new get_schema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_schema failed: unknown result");
      }

      public List<string> get_tables(long ns)
      {
        send_get_tables(ns);
        return recv_get_tables();
      }

      public void send_get_tables(long ns)
      {
        oprot_.WriteMessageBegin(new TMessage("get_tables", TMessageType.Call, seqid_));
        get_tables_args args = new get_tables_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_tables()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_tables_result result = new get_tables_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tables failed: unknown result");
      }

      public List<NamespaceListing> namespace_get_listing(long ns)
      {
        send_namespace_get_listing(ns);
        return recv_namespace_get_listing();
      }

      public void send_namespace_get_listing(long ns)
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_get_listing", TMessageType.Call, seqid_));
        namespace_get_listing_args args = new namespace_get_listing_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<NamespaceListing> recv_namespace_get_listing()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_get_listing_result result = new namespace_get_listing_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "namespace_get_listing failed: unknown result");
      }

      public List<NamespaceListing> get_listing(long ns)
      {
        send_get_listing(ns);
        return recv_get_listing();
      }

      public void send_get_listing(long ns)
      {
        oprot_.WriteMessageBegin(new TMessage("get_listing", TMessageType.Call, seqid_));
        get_listing_args args = new get_listing_args();
        args.Ns = ns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<NamespaceListing> recv_get_listing()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_listing_result result = new get_listing_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_listing failed: unknown result");
      }

      public List<TableSplit> table_get_splits(long ns, string table_name)
      {
        send_table_get_splits(ns, table_name);
        return recv_table_get_splits();
      }

      public void send_table_get_splits(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_get_splits", TMessageType.Call, seqid_));
        table_get_splits_args args = new table_get_splits_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TableSplit> recv_table_get_splits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_get_splits_result result = new table_get_splits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "table_get_splits failed: unknown result");
      }

      public List<TableSplit> get_table_splits(long ns, string table_name)
      {
        send_get_table_splits(ns, table_name);
        return recv_get_table_splits();
      }

      public void send_get_table_splits(long ns, string table_name)
      {
        oprot_.WriteMessageBegin(new TMessage("get_table_splits", TMessageType.Call, seqid_));
        get_table_splits_args args = new get_table_splits_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TableSplit> recv_get_table_splits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_table_splits_result result = new get_table_splits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_table_splits failed: unknown result");
      }

      public void namespace_drop(string ns, bool if_exists)
      {
        send_namespace_drop(ns, if_exists);
        recv_namespace_drop();
      }

      public void send_namespace_drop(string ns, bool if_exists)
      {
        oprot_.WriteMessageBegin(new TMessage("namespace_drop", TMessageType.Call, seqid_));
        namespace_drop_args args = new namespace_drop_args();
        args.Ns = ns;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_namespace_drop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        namespace_drop_result result = new namespace_drop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void drop_namespace(string ns, bool if_exists)
      {
        send_drop_namespace(ns, if_exists);
        recv_drop_namespace();
      }

      public void send_drop_namespace(string ns, bool if_exists)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_namespace", TMessageType.Call, seqid_));
        drop_namespace_args args = new drop_namespace_args();
        args.Ns = ns;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_drop_namespace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_namespace_result result = new drop_namespace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void rename_table(long ns, string name, string new_name)
      {
        send_rename_table(ns, name, new_name);
        recv_rename_table();
      }

      public void send_rename_table(long ns, string name, string new_name)
      {
        oprot_.WriteMessageBegin(new TMessage("rename_table", TMessageType.Call, seqid_));
        rename_table_args args = new rename_table_args();
        args.Ns = ns;
        args.Name = name;
        args.New_name = new_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_rename_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rename_table_result result = new rename_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void table_rename(long ns, string name, string new_name)
      {
        send_table_rename(ns, name, new_name);
        recv_table_rename();
      }

      public void send_table_rename(long ns, string name, string new_name)
      {
        oprot_.WriteMessageBegin(new TMessage("table_rename", TMessageType.Call, seqid_));
        table_rename_args args = new table_rename_args();
        args.Ns = ns;
        args.Name = name;
        args.New_name = new_name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_table_rename()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_rename_result result = new table_rename_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void drop_table(long ns, string name, bool if_exists)
      {
        send_drop_table(ns, name, if_exists);
        recv_drop_table();
      }

      public void send_drop_table(long ns, string name, bool if_exists)
      {
        oprot_.WriteMessageBegin(new TMessage("drop_table", TMessageType.Call, seqid_));
        drop_table_args args = new drop_table_args();
        args.Ns = ns;
        args.Name = name;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_drop_table()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        drop_table_result result = new drop_table_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public void table_drop(long ns, string name, bool if_exists)
      {
        send_table_drop(ns, name, if_exists);
        recv_table_drop();
      }

      public void send_table_drop(long ns, string name, bool if_exists)
      {
        oprot_.WriteMessageBegin(new TMessage("table_drop", TMessageType.Call, seqid_));
        table_drop_args args = new table_drop_args();
        args.Ns = ns;
        args.Name = name;
        args.If_exists = if_exists;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_table_drop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        table_drop_result result = new table_drop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      public string generate_guid()
      {
        send_generate_guid();
        return recv_generate_guid();
      }

      public void send_generate_guid()
      {
        oprot_.WriteMessageBegin(new TMessage("generate_guid", TMessageType.Call, seqid_));
        generate_guid_args args = new generate_guid_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_generate_guid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        generate_guid_result result = new generate_guid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "generate_guid failed: unknown result");
      }

      public string create_cell_unique(long ns, string table_name, Key key, string value)
      {
        send_create_cell_unique(ns, table_name, key, value);
        return recv_create_cell_unique();
      }

      public void send_create_cell_unique(long ns, string table_name, Key key, string value)
      {
        oprot_.WriteMessageBegin(new TMessage("create_cell_unique", TMessageType.Call, seqid_));
        create_cell_unique_args args = new create_cell_unique_args();
        args.Ns = ns;
        args.Table_name = table_name;
        args.Key = key;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_create_cell_unique()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        create_cell_unique_result result = new create_cell_unique_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_cell_unique failed: unknown result");
      }

      public string error_get_text(int error_code)
      {
        send_error_get_text(error_code);
        return recv_error_get_text();
      }

      public void send_error_get_text(int error_code)
      {
        oprot_.WriteMessageBegin(new TMessage("error_get_text", TMessageType.Call, seqid_));
        error_get_text_args args = new error_get_text_args();
        args.Error_code = error_code;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_error_get_text()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        error_get_text_result result = new error_get_text_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "error_get_text failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["namespace_create"] = namespace_create_Process;
        processMap_["create_namespace"] = create_namespace_Process;
        processMap_["create_table"] = create_table_Process;
        processMap_["table_create"] = table_create_Process;
        processMap_["alter_table"] = alter_table_Process;
        processMap_["table_alter"] = table_alter_Process;
        processMap_["refresh_table"] = refresh_table_Process;
        processMap_["namespace_open"] = namespace_open_Process;
        processMap_["open_namespace"] = open_namespace_Process;
        processMap_["namespace_close"] = namespace_close_Process;
        processMap_["close_namespace"] = close_namespace_Process;
        processMap_["future_open"] = future_open_Process;
        processMap_["open_future"] = open_future_Process;
        processMap_["future_cancel"] = future_cancel_Process;
        processMap_["cancel_future"] = cancel_future_Process;
        processMap_["future_get_result"] = future_get_result_Process;
        processMap_["get_future_result"] = get_future_result_Process;
        processMap_["future_get_result_as_arrays"] = future_get_result_as_arrays_Process;
        processMap_["get_future_result_as_arrays"] = get_future_result_as_arrays_Process;
        processMap_["future_get_result_serialized"] = future_get_result_serialized_Process;
        processMap_["get_future_result_serialized"] = get_future_result_serialized_Process;
        processMap_["future_is_empty"] = future_is_empty_Process;
        processMap_["future_is_full"] = future_is_full_Process;
        processMap_["future_is_cancelled"] = future_is_cancelled_Process;
        processMap_["future_has_outstanding"] = future_has_outstanding_Process;
        processMap_["future_close"] = future_close_Process;
        processMap_["close_future"] = close_future_Process;
        processMap_["scanner_open"] = scanner_open_Process;
        processMap_["open_scanner"] = open_scanner_Process;
        processMap_["async_scanner_open"] = async_scanner_open_Process;
        processMap_["open_scanner_async"] = open_scanner_async_Process;
        processMap_["scanner_close"] = scanner_close_Process;
        processMap_["close_scanner"] = close_scanner_Process;
        processMap_["async_scanner_cancel"] = async_scanner_cancel_Process;
        processMap_["cancel_scanner_async"] = cancel_scanner_async_Process;
        processMap_["async_scanner_close"] = async_scanner_close_Process;
        processMap_["close_scanner_async"] = close_scanner_async_Process;
        processMap_["scanner_get_cells"] = scanner_get_cells_Process;
        processMap_["next_cells"] = next_cells_Process;
        processMap_["scanner_get_cells_as_arrays"] = scanner_get_cells_as_arrays_Process;
        processMap_["next_cells_as_arrays"] = next_cells_as_arrays_Process;
        processMap_["scanner_get_cells_serialized"] = scanner_get_cells_serialized_Process;
        processMap_["next_cells_serialized"] = next_cells_serialized_Process;
        processMap_["scanner_get_row"] = scanner_get_row_Process;
        processMap_["next_row"] = next_row_Process;
        processMap_["scanner_get_row_as_arrays"] = scanner_get_row_as_arrays_Process;
        processMap_["next_row_as_arrays"] = next_row_as_arrays_Process;
        processMap_["scanner_get_row_serialized"] = scanner_get_row_serialized_Process;
        processMap_["next_row_serialized"] = next_row_serialized_Process;
        processMap_["get_row"] = get_row_Process;
        processMap_["get_row_as_arrays"] = get_row_as_arrays_Process;
        processMap_["get_row_serialized"] = get_row_serialized_Process;
        processMap_["get_cell"] = get_cell_Process;
        processMap_["get_cells"] = get_cells_Process;
        processMap_["get_cells_as_arrays"] = get_cells_as_arrays_Process;
        processMap_["get_cells_serialized"] = get_cells_serialized_Process;
        processMap_["shared_mutator_refresh"] = shared_mutator_refresh_Process;
        processMap_["refresh_shared_mutator"] = refresh_shared_mutator_Process;
        processMap_["shared_mutator_set_cells"] = shared_mutator_set_cells_Process;
        processMap_["offer_cells"] = offer_cells_Process;
        processMap_["shared_mutator_set_cells_as_arrays"] = shared_mutator_set_cells_as_arrays_Process;
        processMap_["offer_cells_as_arrays"] = offer_cells_as_arrays_Process;
        processMap_["shared_mutator_set_cell"] = shared_mutator_set_cell_Process;
        processMap_["offer_cell"] = offer_cell_Process;
        processMap_["shared_mutator_set_cell_as_array"] = shared_mutator_set_cell_as_array_Process;
        processMap_["offer_cell_as_array"] = offer_cell_as_array_Process;
        processMap_["mutator_open"] = mutator_open_Process;
        processMap_["open_mutator"] = open_mutator_Process;
        processMap_["async_mutator_open"] = async_mutator_open_Process;
        processMap_["open_mutator_async"] = open_mutator_async_Process;
        processMap_["mutator_close"] = mutator_close_Process;
        processMap_["close_mutator"] = close_mutator_Process;
        processMap_["async_mutator_cancel"] = async_mutator_cancel_Process;
        processMap_["cancel_mutator_async"] = cancel_mutator_async_Process;
        processMap_["async_mutator_close"] = async_mutator_close_Process;
        processMap_["close_mutator_async"] = close_mutator_async_Process;
        processMap_["mutator_set_cell"] = mutator_set_cell_Process;
        processMap_["set_cell"] = set_cell_Process;
        processMap_["mutator_set_cell_as_array"] = mutator_set_cell_as_array_Process;
        processMap_["set_cell_as_array"] = set_cell_as_array_Process;
        processMap_["mutator_set_cells"] = mutator_set_cells_Process;
        processMap_["set_cells"] = set_cells_Process;
        processMap_["mutator_set_cells_as_arrays"] = mutator_set_cells_as_arrays_Process;
        processMap_["set_cells_as_arrays"] = set_cells_as_arrays_Process;
        processMap_["mutator_set_cells_serialized"] = mutator_set_cells_serialized_Process;
        processMap_["set_cells_serialized"] = set_cells_serialized_Process;
        processMap_["mutator_flush"] = mutator_flush_Process;
        processMap_["flush_mutator"] = flush_mutator_Process;
        processMap_["async_mutator_set_cell"] = async_mutator_set_cell_Process;
        processMap_["set_cell_async"] = set_cell_async_Process;
        processMap_["async_mutator_set_cell_as_array"] = async_mutator_set_cell_as_array_Process;
        processMap_["set_cell_as_array_async"] = set_cell_as_array_async_Process;
        processMap_["async_mutator_set_cells"] = async_mutator_set_cells_Process;
        processMap_["set_cells_async"] = set_cells_async_Process;
        processMap_["async_mutator_set_cells_as_arrays"] = async_mutator_set_cells_as_arrays_Process;
        processMap_["set_cells_as_arrays_async"] = set_cells_as_arrays_async_Process;
        processMap_["async_mutator_set_cells_serialized"] = async_mutator_set_cells_serialized_Process;
        processMap_["set_cells_serialized_async"] = set_cells_serialized_async_Process;
        processMap_["async_mutator_flush"] = async_mutator_flush_Process;
        processMap_["flush_mutator_async"] = flush_mutator_async_Process;
        processMap_["namespace_exists"] = namespace_exists_Process;
        processMap_["exists_namespace"] = exists_namespace_Process;
        processMap_["exists_table"] = exists_table_Process;
        processMap_["table_exists"] = table_exists_Process;
        processMap_["table_get_id"] = table_get_id_Process;
        processMap_["get_table_id"] = get_table_id_Process;
        processMap_["table_get_schema_str"] = table_get_schema_str_Process;
        processMap_["get_schema_str"] = get_schema_str_Process;
        processMap_["table_get_schema_str_with_ids"] = table_get_schema_str_with_ids_Process;
        processMap_["get_schema_str_with_ids"] = get_schema_str_with_ids_Process;
        processMap_["table_get_schema"] = table_get_schema_Process;
        processMap_["get_schema"] = get_schema_Process;
        processMap_["get_tables"] = get_tables_Process;
        processMap_["namespace_get_listing"] = namespace_get_listing_Process;
        processMap_["get_listing"] = get_listing_Process;
        processMap_["table_get_splits"] = table_get_splits_Process;
        processMap_["get_table_splits"] = get_table_splits_Process;
        processMap_["namespace_drop"] = namespace_drop_Process;
        processMap_["drop_namespace"] = drop_namespace_Process;
        processMap_["rename_table"] = rename_table_Process;
        processMap_["table_rename"] = table_rename_Process;
        processMap_["drop_table"] = drop_table_Process;
        processMap_["table_drop"] = table_drop_Process;
        processMap_["generate_guid"] = generate_guid_Process;
        processMap_["create_cell_unique"] = create_cell_unique_Process;
        processMap_["error_get_text"] = error_get_text_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void namespace_create_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_create_args args = new namespace_create_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_create_result result = new namespace_create_result();
        try {
          iface_.namespace_create(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_create", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_namespace_args args = new create_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_namespace_result result = new create_namespace_result();
        try {
          iface_.create_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("create_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_table_args args = new create_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_table_result result = new create_table_result();
        try {
          iface_.create_table(args.Ns, args.Table_name, args.Schema);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("create_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_create_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_create_args args = new table_create_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_create_result result = new table_create_result();
        try {
          iface_.table_create(args.Ns, args.Table_name, args.Schema);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_create", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void alter_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        alter_table_args args = new alter_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        alter_table_result result = new alter_table_result();
        try {
          iface_.alter_table(args.Ns, args.Table_name, args.Schema);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("alter_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_alter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_alter_args args = new table_alter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_alter_result result = new table_alter_result();
        try {
          iface_.table_alter(args.Ns, args.Table_name, args.Schema);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_alter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refresh_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refresh_table_args args = new refresh_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refresh_table_result result = new refresh_table_result();
        try {
          iface_.refresh_table(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("refresh_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_open_args args = new namespace_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_open_result result = new namespace_open_result();
        try {
          result.Success = iface_.namespace_open(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_namespace_args args = new open_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_namespace_result result = new open_namespace_result();
        try {
          result.Success = iface_.open_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_close_args args = new namespace_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_close_result result = new namespace_close_result();
        try {
          iface_.namespace_close(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_namespace_args args = new close_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_namespace_result result = new close_namespace_result();
        try {
          iface_.close_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_open_args args = new future_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_open_result result = new future_open_result();
        try {
          result.Success = iface_.future_open(args.Capacity);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_future_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_future_args args = new open_future_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_future_result result = new open_future_result();
        try {
          result.Success = iface_.open_future(args.Capacity);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_future", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_cancel_args args = new future_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_cancel_result result = new future_cancel_result();
        try {
          iface_.future_cancel(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_future_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_future_args args = new cancel_future_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_future_result result = new cancel_future_result();
        try {
          iface_.cancel_future(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_future", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_get_result_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_get_result_args args = new future_get_result_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_get_result_result result = new future_get_result_result();
        try {
          result.Success = iface_.future_get_result(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_get_result", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_future_result_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_future_result_args args = new get_future_result_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_future_result_result result = new get_future_result_result();
        try {
          result.Success = iface_.get_future_result(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_future_result", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_get_result_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_get_result_as_arrays_args args = new future_get_result_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_get_result_as_arrays_result result = new future_get_result_as_arrays_result();
        try {
          result.Success = iface_.future_get_result_as_arrays(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_get_result_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_future_result_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_future_result_as_arrays_args args = new get_future_result_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_future_result_as_arrays_result result = new get_future_result_as_arrays_result();
        try {
          result.Success = iface_.get_future_result_as_arrays(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_future_result_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_get_result_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_get_result_serialized_args args = new future_get_result_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_get_result_serialized_result result = new future_get_result_serialized_result();
        try {
          result.Success = iface_.future_get_result_serialized(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_get_result_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_future_result_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_future_result_serialized_args args = new get_future_result_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_future_result_serialized_result result = new get_future_result_serialized_result();
        try {
          result.Success = iface_.get_future_result_serialized(args.Ff, args.Timeout_millis);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_future_result_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_is_empty_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_is_empty_args args = new future_is_empty_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_is_empty_result result = new future_is_empty_result();
        try {
          result.Success = iface_.future_is_empty(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_is_empty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_is_full_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_is_full_args args = new future_is_full_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_is_full_result result = new future_is_full_result();
        try {
          result.Success = iface_.future_is_full(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_is_full", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_is_cancelled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_is_cancelled_args args = new future_is_cancelled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_is_cancelled_result result = new future_is_cancelled_result();
        try {
          result.Success = iface_.future_is_cancelled(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_is_cancelled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_has_outstanding_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_has_outstanding_args args = new future_has_outstanding_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_has_outstanding_result result = new future_has_outstanding_result();
        try {
          result.Success = iface_.future_has_outstanding(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_has_outstanding", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void future_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        future_close_args args = new future_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        future_close_result result = new future_close_result();
        try {
          iface_.future_close(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("future_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_future_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_future_args args = new close_future_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_future_result result = new close_future_result();
        try {
          iface_.close_future(args.Ff);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_future", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_open_args args = new scanner_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_open_result result = new scanner_open_result();
        try {
          result.Success = iface_.scanner_open(args.Ns, args.Table_name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_scanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_scanner_args args = new open_scanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_scanner_result result = new open_scanner_result();
        try {
          result.Success = iface_.open_scanner(args.Ns, args.Table_name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_scanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_scanner_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_scanner_open_args args = new async_scanner_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_scanner_open_result result = new async_scanner_open_result();
        try {
          result.Success = iface_.async_scanner_open(args.Ns, args.Table_name, args.Future, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_scanner_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_scanner_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_scanner_async_args args = new open_scanner_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_scanner_async_result result = new open_scanner_async_result();
        try {
          result.Success = iface_.open_scanner_async(args.Ns, args.Table_name, args.Future, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_scanner_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_close_args args = new scanner_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_close_result result = new scanner_close_result();
        try {
          iface_.scanner_close(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_scanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_scanner_args args = new close_scanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_scanner_result result = new close_scanner_result();
        try {
          iface_.close_scanner(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_scanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_scanner_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_scanner_cancel_args args = new async_scanner_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_scanner_cancel_result result = new async_scanner_cancel_result();
        try {
          iface_.async_scanner_cancel(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_scanner_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_scanner_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_scanner_async_args args = new cancel_scanner_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_scanner_async_result result = new cancel_scanner_async_result();
        try {
          iface_.cancel_scanner_async(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_scanner_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_scanner_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_scanner_close_args args = new async_scanner_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_scanner_close_result result = new async_scanner_close_result();
        try {
          iface_.async_scanner_close(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_scanner_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_scanner_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_scanner_async_args args = new close_scanner_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_scanner_async_result result = new close_scanner_async_result();
        try {
          iface_.close_scanner_async(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_scanner_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_cells_args args = new scanner_get_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_cells_result result = new scanner_get_cells_result();
        try {
          result.Success = iface_.scanner_get_cells(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_cells_args args = new next_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_cells_result result = new next_cells_result();
        try {
          result.Success = iface_.next_cells(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_cells_as_arrays_args args = new scanner_get_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_cells_as_arrays_result result = new scanner_get_cells_as_arrays_result();
        try {
          result.Success = iface_.scanner_get_cells_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_cells_as_arrays_args args = new next_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_cells_as_arrays_result result = new next_cells_as_arrays_result();
        try {
          result.Success = iface_.next_cells_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_cells_serialized_args args = new scanner_get_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_cells_serialized_result result = new scanner_get_cells_serialized_result();
        try {
          result.Success = iface_.scanner_get_cells_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_cells_serialized_args args = new next_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_cells_serialized_result result = new next_cells_serialized_result();
        try {
          result.Success = iface_.next_cells_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_row_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_row_args args = new scanner_get_row_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_row_result result = new scanner_get_row_result();
        try {
          result.Success = iface_.scanner_get_row(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_row", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_row_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_row_args args = new next_row_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_row_result result = new next_row_result();
        try {
          result.Success = iface_.next_row(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_row", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_row_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_row_as_arrays_args args = new scanner_get_row_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_row_as_arrays_result result = new scanner_get_row_as_arrays_result();
        try {
          result.Success = iface_.scanner_get_row_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_row_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_row_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_row_as_arrays_args args = new next_row_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_row_as_arrays_result result = new next_row_as_arrays_result();
        try {
          result.Success = iface_.next_row_as_arrays(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_row_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scanner_get_row_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scanner_get_row_serialized_args args = new scanner_get_row_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scanner_get_row_serialized_result result = new scanner_get_row_serialized_result();
        try {
          result.Success = iface_.scanner_get_row_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("scanner_get_row_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void next_row_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        next_row_serialized_args args = new next_row_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        next_row_serialized_result result = new next_row_serialized_result();
        try {
          result.Success = iface_.next_row_serialized(args.Scanner);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("next_row_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_row_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_row_args args = new get_row_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_row_result result = new get_row_result();
        try {
          result.Success = iface_.get_row(args.Ns, args.Table_name, args.Row);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_row", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_row_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_row_as_arrays_args args = new get_row_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_row_as_arrays_result result = new get_row_as_arrays_result();
        try {
          result.Success = iface_.get_row_as_arrays(args.Ns, args.Name, args.Row);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_row_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_row_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_row_serialized_args args = new get_row_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_row_serialized_result result = new get_row_serialized_result();
        try {
          result.Success = iface_.get_row_serialized(args.Ns, args.Table_name, args.Row);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_row_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cell_args args = new get_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cell_result result = new get_cell_result();
        try {
          result.Success = iface_.get_cell(args.Ns, args.Table_name, args.Row, args.Column);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cells_args args = new get_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cells_result result = new get_cells_result();
        try {
          result.Success = iface_.get_cells(args.Ns, args.Table_name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cells_as_arrays_args args = new get_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cells_as_arrays_result result = new get_cells_as_arrays_result();
        try {
          result.Success = iface_.get_cells_as_arrays(args.Ns, args.Name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_cells_serialized_args args = new get_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_cells_serialized_result result = new get_cells_serialized_result();
        try {
          result.Success = iface_.get_cells_serialized(args.Ns, args.Name, args.Scan_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_refresh_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_refresh_args args = new shared_mutator_refresh_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_refresh_result result = new shared_mutator_refresh_result();
        try {
          iface_.shared_mutator_refresh(args.Ns, args.Table_name, args.Mutate_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_refresh", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refresh_shared_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refresh_shared_mutator_args args = new refresh_shared_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refresh_shared_mutator_result result = new refresh_shared_mutator_result();
        try {
          iface_.refresh_shared_mutator(args.Ns, args.Table_name, args.Mutate_spec);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("refresh_shared_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cells_args args = new shared_mutator_set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cells_result result = new shared_mutator_set_cells_result();
        try {
          iface_.shared_mutator_set_cells(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cells_args args = new offer_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cells_result result = new offer_cells_result();
        try {
          iface_.offer_cells(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cells_as_arrays_args args = new shared_mutator_set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cells_as_arrays_result result = new shared_mutator_set_cells_as_arrays_result();
        try {
          iface_.shared_mutator_set_cells_as_arrays(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cells_as_arrays_args args = new offer_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cells_as_arrays_result result = new offer_cells_as_arrays_result();
        try {
          iface_.offer_cells_as_arrays(args.Ns, args.Table_name, args.Mutate_spec, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cell_args args = new shared_mutator_set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cell_result result = new shared_mutator_set_cell_result();
        try {
          iface_.shared_mutator_set_cell(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cell_args args = new offer_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cell_result result = new offer_cell_result();
        try {
          iface_.offer_cell(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shared_mutator_set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shared_mutator_set_cell_as_array_args args = new shared_mutator_set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        shared_mutator_set_cell_as_array_result result = new shared_mutator_set_cell_as_array_result();
        try {
          iface_.shared_mutator_set_cell_as_array(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("shared_mutator_set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void offer_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        offer_cell_as_array_args args = new offer_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        offer_cell_as_array_result result = new offer_cell_as_array_result();
        try {
          iface_.offer_cell_as_array(args.Ns, args.Table_name, args.Mutate_spec, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("offer_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_open_args args = new mutator_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_open_result result = new mutator_open_result();
        try {
          result.Success = iface_.mutator_open(args.Ns, args.Table_name, args.Flags, args.Flush_interval);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_mutator_args args = new open_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_mutator_result result = new open_mutator_result();
        try {
          result.Success = iface_.open_mutator(args.Ns, args.Table_name, args.Flags, args.Flush_interval);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_open_args args = new async_mutator_open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_open_result result = new async_mutator_open_result();
        try {
          result.Success = iface_.async_mutator_open(args.Ns, args.Table_name, args.Future, args.Flags);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void open_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_mutator_async_args args = new open_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_mutator_async_result result = new open_mutator_async_result();
        try {
          result.Success = iface_.open_mutator_async(args.Ns, args.Table_name, args.Future, args.Flags);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("open_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_close_args args = new mutator_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_close_result result = new mutator_close_result();
        try {
          iface_.mutator_close(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_mutator_args args = new close_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_mutator_result result = new close_mutator_result();
        try {
          iface_.close_mutator(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_cancel_args args = new async_mutator_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_cancel_result result = new async_mutator_cancel_result();
        try {
          iface_.async_mutator_cancel(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_mutator_async_args args = new cancel_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_mutator_async_result result = new cancel_mutator_async_result();
        try {
          iface_.cancel_mutator_async(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancel_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_close_args args = new async_mutator_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_close_result result = new async_mutator_close_result();
        try {
          iface_.async_mutator_close(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_mutator_async_args args = new close_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_mutator_async_result result = new close_mutator_async_result();
        try {
          iface_.close_mutator_async(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("close_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cell_args args = new mutator_set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cell_result result = new mutator_set_cell_result();
        try {
          iface_.mutator_set_cell(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_args args = new set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_result result = new set_cell_result();
        try {
          iface_.set_cell(args.Ns, args.Table_name, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cell_as_array_args args = new mutator_set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cell_as_array_result result = new mutator_set_cell_as_array_result();
        try {
          iface_.mutator_set_cell_as_array(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_as_array_args args = new set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_as_array_result result = new set_cell_as_array_result();
        try {
          iface_.set_cell_as_array(args.Ns, args.Table_name, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cells_args args = new mutator_set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cells_result result = new mutator_set_cells_result();
        try {
          iface_.mutator_set_cells(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_args args = new set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_result result = new set_cells_result();
        try {
          iface_.set_cells(args.Ns, args.Table_name, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cells_as_arrays_args args = new mutator_set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cells_as_arrays_result result = new mutator_set_cells_as_arrays_result();
        try {
          iface_.mutator_set_cells_as_arrays(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_as_arrays_args args = new set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_as_arrays_result result = new set_cells_as_arrays_result();
        try {
          iface_.set_cells_as_arrays(args.Ns, args.Table_name, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_set_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_set_cells_serialized_args args = new mutator_set_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_set_cells_serialized_result result = new mutator_set_cells_serialized_result();
        try {
          iface_.mutator_set_cells_serialized(args.Mutator, args.Cells, args.Flush);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_set_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_serialized_args args = new set_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_serialized_result result = new set_cells_serialized_result();
        try {
          iface_.set_cells_serialized(args.Ns, args.Table_name, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutator_flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutator_flush_args args = new mutator_flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutator_flush_result result = new mutator_flush_result();
        try {
          iface_.mutator_flush(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("mutator_flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void flush_mutator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flush_mutator_args args = new flush_mutator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flush_mutator_result result = new flush_mutator_result();
        try {
          iface_.flush_mutator(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("flush_mutator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cell_args args = new async_mutator_set_cell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cell_result result = new async_mutator_set_cell_result();
        try {
          iface_.async_mutator_set_cell(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cell", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_async_args args = new set_cell_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_async_result result = new set_cell_async_result();
        try {
          iface_.set_cell_async(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cell_as_array_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cell_as_array_args args = new async_mutator_set_cell_as_array_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cell_as_array_result result = new async_mutator_set_cell_as_array_result();
        try {
          iface_.async_mutator_set_cell_as_array(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cell_as_array", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cell_as_array_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cell_as_array_async_args args = new set_cell_as_array_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cell_as_array_async_result result = new set_cell_as_array_async_result();
        try {
          iface_.set_cell_as_array_async(args.Mutator, args.Cell);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cell_as_array_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cells_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cells_args args = new async_mutator_set_cells_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cells_result result = new async_mutator_set_cells_result();
        try {
          iface_.async_mutator_set_cells(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cells", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_async_args args = new set_cells_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_async_result result = new set_cells_async_result();
        try {
          iface_.set_cells_async(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cells_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cells_as_arrays_args args = new async_mutator_set_cells_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cells_as_arrays_result result = new async_mutator_set_cells_as_arrays_result();
        try {
          iface_.async_mutator_set_cells_as_arrays(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cells_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_as_arrays_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_as_arrays_async_args args = new set_cells_as_arrays_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_as_arrays_async_result result = new set_cells_as_arrays_async_result();
        try {
          iface_.set_cells_as_arrays_async(args.Mutator, args.Cells);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_as_arrays_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_set_cells_serialized_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_set_cells_serialized_args args = new async_mutator_set_cells_serialized_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_set_cells_serialized_result result = new async_mutator_set_cells_serialized_result();
        try {
          iface_.async_mutator_set_cells_serialized(args.Mutator, args.Cells, args.Flush);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_set_cells_serialized", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void set_cells_serialized_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        set_cells_serialized_async_args args = new set_cells_serialized_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        set_cells_serialized_async_result result = new set_cells_serialized_async_result();
        try {
          iface_.set_cells_serialized_async(args.Mutator, args.Cells, args.Flush);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("set_cells_serialized_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void async_mutator_flush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        async_mutator_flush_args args = new async_mutator_flush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        async_mutator_flush_result result = new async_mutator_flush_result();
        try {
          iface_.async_mutator_flush(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("async_mutator_flush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void flush_mutator_async_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flush_mutator_async_args args = new flush_mutator_async_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flush_mutator_async_result result = new flush_mutator_async_result();
        try {
          iface_.flush_mutator_async(args.Mutator);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("flush_mutator_async", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_exists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_exists_args args = new namespace_exists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_exists_result result = new namespace_exists_result();
        try {
          result.Success = iface_.namespace_exists(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_exists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void exists_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        exists_namespace_args args = new exists_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        exists_namespace_result result = new exists_namespace_result();
        try {
          result.Success = iface_.exists_namespace(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("exists_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void exists_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        exists_table_args args = new exists_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        exists_table_result result = new exists_table_result();
        try {
          result.Success = iface_.exists_table(args.Ns, args.Name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("exists_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_exists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_exists_args args = new table_exists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_exists_result result = new table_exists_result();
        try {
          result.Success = iface_.table_exists(args.Ns, args.Name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_exists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_id_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_id_args args = new table_get_id_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_id_result result = new table_get_id_result();
        try {
          result.Success = iface_.table_get_id(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_id", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_table_id_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_table_id_args args = new get_table_id_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_table_id_result result = new get_table_id_result();
        try {
          result.Success = iface_.get_table_id(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_table_id", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_schema_str_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_schema_str_args args = new table_get_schema_str_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_schema_str_result result = new table_get_schema_str_result();
        try {
          result.Success = iface_.table_get_schema_str(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_schema_str", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_str_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_str_args args = new get_schema_str_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_str_result result = new get_schema_str_result();
        try {
          result.Success = iface_.get_schema_str(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema_str", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_schema_str_with_ids_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_schema_str_with_ids_args args = new table_get_schema_str_with_ids_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_schema_str_with_ids_result result = new table_get_schema_str_with_ids_result();
        try {
          result.Success = iface_.table_get_schema_str_with_ids(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_schema_str_with_ids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_str_with_ids_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_str_with_ids_args args = new get_schema_str_with_ids_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_str_with_ids_result result = new get_schema_str_with_ids_result();
        try {
          result.Success = iface_.get_schema_str_with_ids(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema_str_with_ids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_schema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_schema_args args = new table_get_schema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_schema_result result = new table_get_schema_result();
        try {
          result.Success = iface_.table_get_schema(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_schema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_schema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_schema_args args = new get_schema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_schema_result result = new get_schema_result();
        try {
          result.Success = iface_.get_schema(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_schema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_tables_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_tables_args args = new get_tables_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_tables_result result = new get_tables_result();
        try {
          result.Success = iface_.get_tables(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_tables", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_get_listing_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_get_listing_args args = new namespace_get_listing_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_get_listing_result result = new namespace_get_listing_result();
        try {
          result.Success = iface_.namespace_get_listing(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_get_listing", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_listing_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_listing_args args = new get_listing_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_listing_result result = new get_listing_result();
        try {
          result.Success = iface_.get_listing(args.Ns);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_listing", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_get_splits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_get_splits_args args = new table_get_splits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_get_splits_result result = new table_get_splits_result();
        try {
          result.Success = iface_.table_get_splits(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_get_splits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_table_splits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_table_splits_args args = new get_table_splits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_table_splits_result result = new get_table_splits_result();
        try {
          result.Success = iface_.get_table_splits(args.Ns, args.Table_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("get_table_splits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void namespace_drop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        namespace_drop_args args = new namespace_drop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        namespace_drop_result result = new namespace_drop_result();
        try {
          iface_.namespace_drop(args.Ns, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("namespace_drop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_namespace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_namespace_args args = new drop_namespace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_namespace_result result = new drop_namespace_result();
        try {
          iface_.drop_namespace(args.Ns, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("drop_namespace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rename_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rename_table_args args = new rename_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rename_table_result result = new rename_table_result();
        try {
          iface_.rename_table(args.Ns, args.Name, args.New_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("rename_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_rename_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_rename_args args = new table_rename_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_rename_result result = new table_rename_result();
        try {
          iface_.table_rename(args.Ns, args.Name, args.New_name);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_rename", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void drop_table_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        drop_table_args args = new drop_table_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        drop_table_result result = new drop_table_result();
        try {
          iface_.drop_table(args.Ns, args.Name, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("drop_table", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void table_drop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        table_drop_args args = new table_drop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        table_drop_result result = new table_drop_result();
        try {
          iface_.table_drop(args.Ns, args.Name, args.If_exists);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("table_drop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void generate_guid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        generate_guid_args args = new generate_guid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        generate_guid_result result = new generate_guid_result();
        result.Success = iface_.generate_guid();
        oprot.WriteMessageBegin(new TMessage("generate_guid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void create_cell_unique_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        create_cell_unique_args args = new create_cell_unique_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        create_cell_unique_result result = new create_cell_unique_result();
        try {
          result.Success = iface_.create_cell_unique(args.Ns, args.Table_name, args.Key, args.Value);
        } catch (ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("create_cell_unique", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void error_get_text_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        error_get_text_args args = new error_get_text_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        error_get_text_result result = new error_get_text_result();
        result.Success = iface_.error_get_text(args.Error_code);
        oprot.WriteMessageBegin(new TMessage("error_get_text", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class namespace_create_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public namespace_create_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_create_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_create_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_create_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public namespace_create_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_create_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_create_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_namespace_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public create_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_namespace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_namespace_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_namespace_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public create_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_namespace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_namespace_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_table_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _schema;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool schema;
      }

      public create_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Schema = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Schema != null && __isset.schema) {
          field.Name = "schema";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Schema);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_table_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Schema: ");
        sb.Append(Schema);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public create_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_table_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_create_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _schema;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool schema;
      }

      public table_create_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Schema = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_create_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Schema != null && __isset.schema) {
          field.Name = "schema";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Schema);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_create_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Schema: ");
        sb.Append(Schema);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_create_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public table_create_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_create_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_create_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_table_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _schema;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool schema;
      }

      public alter_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Schema = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Schema != null && __isset.schema) {
          field.Name = "schema";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Schema);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_table_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Schema: ");
        sb.Append(Schema);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class alter_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public alter_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("alter_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("alter_table_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_alter_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _schema;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool schema;
      }

      public table_alter_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Schema = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_alter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Schema != null && __isset.schema) {
          field.Name = "schema";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Schema);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_alter_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Schema: ");
        sb.Append(Schema);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_alter_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public table_alter_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_alter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_alter_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class refresh_table_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public refresh_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("refresh_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("refresh_table_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class refresh_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public refresh_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("refresh_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("refresh_table_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_open_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public namespace_open_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_open_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public namespace_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_open_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_namespace_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public open_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_namespace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_namespace_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_namespace_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_namespace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_namespace_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_close_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public namespace_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_close_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public namespace_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_close_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_namespace_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public close_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_namespace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_namespace_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_namespace_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public close_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_namespace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_namespace_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_open_args : TBase
    {
      private int _capacity;

      public int Capacity
      {
        get
        {
          return _capacity;
        }
        set
        {
          __isset.capacity = true;
          this._capacity = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool capacity;
      }

      public future_open_args() {
        this._capacity = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Capacity = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.capacity) {
          field.Name = "capacity";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Capacity);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_open_args(");
        sb.Append("Capacity: ");
        sb.Append(Capacity);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_open_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_future_args : TBase
    {
      private int _capacity;

      public int Capacity
      {
        get
        {
          return _capacity;
        }
        set
        {
          __isset.capacity = true;
          this._capacity = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool capacity;
      }

      public open_future_args() {
        this._capacity = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Capacity = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_future_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.capacity) {
          field.Name = "capacity";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Capacity);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_future_args(");
        sb.Append("Capacity: ");
        sb.Append(Capacity);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_future_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_future_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_future_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_future_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_cancel_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public future_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_cancel_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_cancel_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public future_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_cancel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_cancel_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_future_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public cancel_future_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_future_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_future_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_future_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public cancel_future_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_future_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_future_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_get_result_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public future_get_result_args() {
        this._timeout_millis = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout_millis = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_get_result_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout_millis) {
          field.Name = "timeout_millis";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout_millis);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_get_result_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(",Timeout_millis: ");
        sb.Append(Timeout_millis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_get_result_result : TBase
    {
      private Result _success;
      private ClientException _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_get_result_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Result();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_get_result_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_get_result_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_future_result_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public get_future_result_args() {
        this._timeout_millis = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout_millis = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_future_result_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout_millis) {
          field.Name = "timeout_millis";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout_millis);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_future_result_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(",Timeout_millis: ");
        sb.Append(Timeout_millis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_future_result_result : TBase
    {
      private Result _success;
      private ClientException _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_future_result_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Result();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_future_result_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_future_result_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_get_result_as_arrays_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public future_get_result_as_arrays_args() {
        this._timeout_millis = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout_millis = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_get_result_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout_millis) {
          field.Name = "timeout_millis";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout_millis);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_get_result_as_arrays_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(",Timeout_millis: ");
        sb.Append(Timeout_millis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_get_result_as_arrays_result : TBase
    {
      private ResultAsArrays _success;
      private ClientException _e;

      public ResultAsArrays Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_get_result_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResultAsArrays();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_get_result_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_get_result_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_future_result_as_arrays_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public get_future_result_as_arrays_args() {
        this._timeout_millis = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout_millis = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_future_result_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout_millis) {
          field.Name = "timeout_millis";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout_millis);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_future_result_as_arrays_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(",Timeout_millis: ");
        sb.Append(Timeout_millis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_future_result_as_arrays_result : TBase
    {
      private ResultAsArrays _success;
      private ClientException _e;

      public ResultAsArrays Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_future_result_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResultAsArrays();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_future_result_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_future_result_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_get_result_serialized_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public future_get_result_serialized_args() {
        this._timeout_millis = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout_millis = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_get_result_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout_millis) {
          field.Name = "timeout_millis";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout_millis);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_get_result_serialized_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(",Timeout_millis: ");
        sb.Append(Timeout_millis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_get_result_serialized_result : TBase
    {
      private ResultSerialized _success;
      private ClientException _e;

      public ResultSerialized Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_get_result_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResultSerialized();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_get_result_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_get_result_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_future_result_serialized_args : TBase
    {
      private long _ff;
      private int _timeout_millis;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }

      public int Timeout_millis
      {
        get
        {
          return _timeout_millis;
        }
        set
        {
          __isset.timeout_millis = true;
          this._timeout_millis = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
        public bool timeout_millis;
      }

      public get_future_result_serialized_args() {
        this._timeout_millis = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout_millis = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_future_result_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout_millis) {
          field.Name = "timeout_millis";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout_millis);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_future_result_serialized_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(",Timeout_millis: ");
        sb.Append(Timeout_millis);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_future_result_serialized_result : TBase
    {
      private ResultSerialized _success;
      private ClientException _e;

      public ResultSerialized Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_future_result_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResultSerialized();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_future_result_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_future_result_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_is_empty_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public future_is_empty_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_is_empty_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_is_empty_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_is_empty_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_is_empty_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_is_empty_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_is_empty_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_is_full_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public future_is_full_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_is_full_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_is_full_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_is_full_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_is_full_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_is_full_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_is_full_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_is_cancelled_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public future_is_cancelled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_is_cancelled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_is_cancelled_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_is_cancelled_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_is_cancelled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_is_cancelled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_is_cancelled_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_has_outstanding_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public future_has_outstanding_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_has_outstanding_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_has_outstanding_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_has_outstanding_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public future_has_outstanding_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_has_outstanding_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_has_outstanding_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_close_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public future_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_close_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class future_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public future_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("future_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("future_close_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_future_args : TBase
    {
      private long _ff;

      public long Ff
      {
        get
        {
          return _ff;
        }
        set
        {
          __isset.ff = true;
          this._ff = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ff;
      }

      public close_future_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ff = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_future_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ff) {
          field.Name = "ff";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ff);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_future_args(");
        sb.Append("Ff: ");
        sb.Append(Ff);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_future_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public close_future_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_future_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_future_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool scan_spec;
      }

      public scanner_open_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_open_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_open_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_scanner_args : TBase
    {
      private long _ns;
      private string _table_name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool scan_spec;
      }

      public open_scanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_scanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_scanner_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_scanner_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_scanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_scanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_scanner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_scanner_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool scan_spec;
      }

      public async_scanner_open_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Future = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_scanner_open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.future) {
          field.Name = "future";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Future);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_scanner_open_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Future: ");
        sb.Append(Future);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_scanner_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public async_scanner_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_scanner_open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_scanner_open_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_scanner_async_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool scan_spec;
      }

      public open_scanner_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Future = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_scanner_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.future) {
          field.Name = "future";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Future);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_scanner_async_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Future: ");
        sb.Append(Future);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_scanner_async_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_scanner_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_scanner_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_scanner_async_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_close_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_close_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public scanner_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_close_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_scanner_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public close_scanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_scanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_scanner_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_scanner_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public close_scanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_scanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_scanner_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_scanner_cancel_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public async_scanner_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_scanner_cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_scanner_cancel_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_scanner_cancel_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_scanner_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_scanner_cancel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_scanner_cancel_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_scanner_async_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public cancel_scanner_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_scanner_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_scanner_async_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_scanner_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public cancel_scanner_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_scanner_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_scanner_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_scanner_close_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public async_scanner_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_scanner_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_scanner_close_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_scanner_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_scanner_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_scanner_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_scanner_close_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_scanner_async_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public close_scanner_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_scanner_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_scanner_async_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_scanner_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public close_scanner_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_scanner_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_scanner_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_cells_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_cells_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_cells_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Cell>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    Cell _elem44 = new Cell();
                    _elem44 = new Cell();
                    _elem44.Read(iprot);
                    Success.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Cell _iter45 in Success)
              {
                _iter45.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_cells_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_cells_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public next_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_cells_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_cells_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Cell>();
                  TList _list46 = iprot.ReadListBegin();
                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                  {
                    Cell _elem48 = new Cell();
                    _elem48 = new Cell();
                    _elem48.Read(iprot);
                    Success.Add(_elem48);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Cell _iter49 in Success)
              {
                _iter49.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_cells_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_cells_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_cells_as_arrays_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_cells_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List<string>>();
                  TList _list50 = iprot.ReadListBegin();
                  for( int _i51 = 0; _i51 < _list50.Count; ++_i51)
                  {
                    List<string> _elem52 = new List<string>();
                    {
                      _elem52 = new List<string>();
                      TList _list53 = iprot.ReadListBegin();
                      for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                      {
                        string _elem55 = null;
                        _elem55 = iprot.ReadString();
                        _elem52.Add(_elem55);
                      }
                      iprot.ReadListEnd();
                    }
                    Success.Add(_elem52);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Success.Count));
              foreach (List<string> _iter56 in Success)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter56.Count));
                  foreach (string _iter57 in _iter56)
                  {
                    oprot.WriteString(_iter57);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_cells_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_cells_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public next_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_cells_as_arrays_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_cells_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List<string>>();
                  TList _list58 = iprot.ReadListBegin();
                  for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    List<string> _elem60 = new List<string>();
                    {
                      _elem60 = new List<string>();
                      TList _list61 = iprot.ReadListBegin();
                      for( int _i62 = 0; _i62 < _list61.Count; ++_i62)
                      {
                        string _elem63 = null;
                        _elem63 = iprot.ReadString();
                        _elem60.Add(_elem63);
                      }
                      iprot.ReadListEnd();
                    }
                    Success.Add(_elem60);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Success.Count));
              foreach (List<string> _iter64 in Success)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter64.Count));
                  foreach (string _iter65 in _iter64)
                  {
                    oprot.WriteString(_iter65);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_cells_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_cells_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_cells_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_cells_serialized_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_cells_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_cells_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_cells_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_cells_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public next_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_cells_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_cells_serialized_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_cells_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_cells_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_cells_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_row_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_row_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_row_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_row_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_row_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_row_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Cell>();
                  TList _list66 = iprot.ReadListBegin();
                  for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                  {
                    Cell _elem68 = new Cell();
                    _elem68 = new Cell();
                    _elem68.Read(iprot);
                    Success.Add(_elem68);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_row_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Cell _iter69 in Success)
              {
                _iter69.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_row_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_row_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public next_row_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_row_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_row_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_row_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_row_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Cell>();
                  TList _list70 = iprot.ReadListBegin();
                  for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                  {
                    Cell _elem72 = new Cell();
                    _elem72 = new Cell();
                    _elem72.Read(iprot);
                    Success.Add(_elem72);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_row_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Cell _iter73 in Success)
              {
                _iter73.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_row_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_row_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_row_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_row_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_row_as_arrays_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_row_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_row_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List<string>>();
                  TList _list74 = iprot.ReadListBegin();
                  for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                  {
                    List<string> _elem76 = new List<string>();
                    {
                      _elem76 = new List<string>();
                      TList _list77 = iprot.ReadListBegin();
                      for( int _i78 = 0; _i78 < _list77.Count; ++_i78)
                      {
                        string _elem79 = null;
                        _elem79 = iprot.ReadString();
                        _elem76.Add(_elem79);
                      }
                      iprot.ReadListEnd();
                    }
                    Success.Add(_elem76);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_row_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Success.Count));
              foreach (List<string> _iter80 in Success)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter80.Count));
                  foreach (string _iter81 in _iter80)
                  {
                    oprot.WriteString(_iter81);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_row_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_row_as_arrays_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public next_row_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_row_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_row_as_arrays_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_row_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_row_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List<string>>();
                  TList _list82 = iprot.ReadListBegin();
                  for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                  {
                    List<string> _elem84 = new List<string>();
                    {
                      _elem84 = new List<string>();
                      TList _list85 = iprot.ReadListBegin();
                      for( int _i86 = 0; _i86 < _list85.Count; ++_i86)
                      {
                        string _elem87 = null;
                        _elem87 = iprot.ReadString();
                        _elem84.Add(_elem87);
                      }
                      iprot.ReadListEnd();
                    }
                    Success.Add(_elem84);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_row_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Success.Count));
              foreach (List<string> _iter88 in Success)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter88.Count));
                  foreach (string _iter89 in _iter88)
                  {
                    oprot.WriteString(_iter89);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_row_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_row_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public scanner_get_row_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_row_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_row_serialized_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class scanner_get_row_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public scanner_get_row_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scanner_get_row_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scanner_get_row_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_row_serialized_args : TBase
    {
      private long _scanner;

      public long Scanner
      {
        get
        {
          return _scanner;
        }
        set
        {
          __isset.scanner = true;
          this._scanner = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scanner;
      }

      public next_row_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Scanner = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_row_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scanner) {
          field.Name = "scanner";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Scanner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_row_serialized_args(");
        sb.Append("Scanner: ");
        sb.Append(Scanner);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class next_row_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public next_row_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("next_row_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("next_row_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_row_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _row;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool row;
      }

      public get_row_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Row = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_row_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Row != null && __isset.row) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Row);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_row_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Row: ");
        sb.Append(Row);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_row_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_row_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Cell>();
                  TList _list90 = iprot.ReadListBegin();
                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                  {
                    Cell _elem92 = new Cell();
                    _elem92 = new Cell();
                    _elem92.Read(iprot);
                    Success.Add(_elem92);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_row_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Cell _iter93 in Success)
              {
                _iter93.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_row_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_row_as_arrays_args : TBase
    {
      private long _ns;
      private string _name;
      private string _row;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool row;
      }

      public get_row_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Row = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_row_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Row != null && __isset.row) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Row);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_row_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",Row: ");
        sb.Append(Row);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_row_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_row_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List<string>>();
                  TList _list94 = iprot.ReadListBegin();
                  for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                  {
                    List<string> _elem96 = new List<string>();
                    {
                      _elem96 = new List<string>();
                      TList _list97 = iprot.ReadListBegin();
                      for( int _i98 = 0; _i98 < _list97.Count; ++_i98)
                      {
                        string _elem99 = null;
                        _elem99 = iprot.ReadString();
                        _elem96.Add(_elem99);
                      }
                      iprot.ReadListEnd();
                    }
                    Success.Add(_elem96);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_row_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Success.Count));
              foreach (List<string> _iter100 in Success)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter100.Count));
                  foreach (string _iter101 in _iter100)
                  {
                    oprot.WriteString(_iter101);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_row_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_row_serialized_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _row;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool row;
      }

      public get_row_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Row = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_row_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Row != null && __isset.row) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Row);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_row_serialized_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Row: ");
        sb.Append(Row);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_row_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_row_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_row_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_row_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private string _row;
      private string _column;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public string Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }

      public string Column
      {
        get
        {
          return _column;
        }
        set
        {
          __isset.column = true;
          this._column = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool row;
        public bool column;
      }

      public get_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Row = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Column = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cell_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Row != null && __isset.row) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Row);
          oprot.WriteFieldEnd();
        }
        if (Column != null && __isset.column) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Column);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cell_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Row: ");
        sb.Append(Row);
        sb.Append(",Column: ");
        sb.Append(Column);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cell_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cell_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cell_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool scan_spec;
      }

      public get_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cells_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cells_result : TBase
    {
      private List<Cell> _success;
      private ClientException _e;

      public List<Cell> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Cell>();
                  TList _list102 = iprot.ReadListBegin();
                  for( int _i103 = 0; _i103 < _list102.Count; ++_i103)
                  {
                    Cell _elem104 = new Cell();
                    _elem104 = new Cell();
                    _elem104.Read(iprot);
                    Success.Add(_elem104);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Cell _iter105 in Success)
              {
                _iter105.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cells_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool scan_spec;
      }

      public get_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cells_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cells_as_arrays_result : TBase
    {
      private List<List<string>> _success;
      private ClientException _e;

      public List<List<string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<List<string>>();
                  TList _list106 = iprot.ReadListBegin();
                  for( int _i107 = 0; _i107 < _list106.Count; ++_i107)
                  {
                    List<string> _elem108 = new List<string>();
                    {
                      _elem108 = new List<string>();
                      TList _list109 = iprot.ReadListBegin();
                      for( int _i110 = 0; _i110 < _list109.Count; ++_i110)
                      {
                        string _elem111 = null;
                        _elem111 = iprot.ReadString();
                        _elem108.Add(_elem111);
                      }
                      iprot.ReadListEnd();
                    }
                    Success.Add(_elem108);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Success.Count));
              foreach (List<string> _iter112 in Success)
              {
                {
                  oprot.WriteListBegin(new TList(TType.String, _iter112.Count));
                  foreach (string _iter113 in _iter112)
                  {
                    oprot.WriteString(_iter113);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cells_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cells_serialized_args : TBase
    {
      private long _ns;
      private string _name;
      private ScanSpec _scan_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public ScanSpec Scan_spec
      {
        get
        {
          return _scan_spec;
        }
        set
        {
          __isset.scan_spec = true;
          this._scan_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool scan_spec;
      }

      public get_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Scan_spec = new ScanSpec();
                Scan_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cells_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Scan_spec != null && __isset.scan_spec) {
          field.Name = "scan_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Scan_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cells_serialized_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",Scan_spec: ");
        sb.Append(Scan_spec== null ? "<null>" : Scan_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_cells_serialized_result : TBase
    {
      private byte[] _success;
      private ClientException _e;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_cells_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_cells_serialized_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_refresh_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
      }

      public shared_mutator_refresh_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_refresh_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_refresh_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_refresh_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public shared_mutator_refresh_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_refresh_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_refresh_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class refresh_shared_mutator_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
      }

      public refresh_shared_mutator_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("refresh_shared_mutator_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("refresh_shared_mutator_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class refresh_shared_mutator_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public refresh_shared_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("refresh_shared_mutator_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("refresh_shared_mutator_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<Cell> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public shared_mutator_set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list114 = iprot.ReadListBegin();
                  for( int _i115 = 0; _i115 < _list114.Count; ++_i115)
                  {
                    Cell _elem116 = new Cell();
                    _elem116 = new Cell();
                    _elem116.Read(iprot);
                    Cells.Add(_elem116);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter117 in Cells)
            {
              _iter117.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cells_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cells_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<Cell> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public offer_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list118 = iprot.ReadListBegin();
                  for( int _i119 = 0; _i119 < _list118.Count; ++_i119)
                  {
                    Cell _elem120 = new Cell();
                    _elem120 = new Cell();
                    _elem120.Read(iprot);
                    Cells.Add(_elem120);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter121 in Cells)
            {
              _iter121.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cells_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public offer_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cells_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<List<string>> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public shared_mutator_set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Cells = new List<List<string>>();
                  TList _list122 = iprot.ReadListBegin();
                  for( int _i123 = 0; _i123 < _list122.Count; ++_i123)
                  {
                    List<string> _elem124 = new List<string>();
                    {
                      _elem124 = new List<string>();
                      TList _list125 = iprot.ReadListBegin();
                      for( int _i126 = 0; _i126 < _list125.Count; ++_i126)
                      {
                        string _elem127 = null;
                        _elem127 = iprot.ReadString();
                        _elem124.Add(_elem127);
                      }
                      iprot.ReadListEnd();
                    }
                    Cells.Add(_elem124);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Cells.Count));
            foreach (List<string> _iter128 in Cells)
            {
              {
                oprot.WriteListBegin(new TList(TType.String, _iter128.Count));
                foreach (string _iter129 in _iter128)
                {
                  oprot.WriteString(_iter129);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cells_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cells_as_arrays_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<List<string>> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cells;
      }

      public offer_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Cells = new List<List<string>>();
                  TList _list130 = iprot.ReadListBegin();
                  for( int _i131 = 0; _i131 < _list130.Count; ++_i131)
                  {
                    List<string> _elem132 = new List<string>();
                    {
                      _elem132 = new List<string>();
                      TList _list133 = iprot.ReadListBegin();
                      for( int _i134 = 0; _i134 < _list133.Count; ++_i134)
                      {
                        string _elem135 = null;
                        _elem135 = iprot.ReadString();
                        _elem132.Add(_elem135);
                      }
                      iprot.ReadListEnd();
                    }
                    Cells.Add(_elem132);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Cells.Count));
            foreach (List<string> _iter136 in Cells)
            {
              {
                oprot.WriteListBegin(new TList(TType.String, _iter136.Count));
                foreach (string _iter137 in _iter136)
                {
                  oprot.WriteString(_iter137);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cells_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public offer_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cells_as_arrays_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private Cell _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public shared_mutator_set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Cell = new Cell();
                Cell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cell_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Cell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cell_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cell: ");
        sb.Append(Cell== null ? "<null>" : Cell.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cell_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cell_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private Cell _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public offer_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Cell = new Cell();
                Cell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cell_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Cell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cell_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cell: ");
        sb.Append(Cell== null ? "<null>" : Cell.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public offer_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cell_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cell_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cell_as_array_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<string> _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public shared_mutator_set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Cell = new List<string>();
                  TList _list138 = iprot.ReadListBegin();
                  for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                  {
                    string _elem140 = null;
                    _elem140 = iprot.ReadString();
                    Cell.Add(_elem140);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cell_as_array_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Cell.Count));
            foreach (string _iter141 in Cell)
            {
              oprot.WriteString(_iter141);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cell_as_array_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cell: ");
        sb.Append(Cell);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class shared_mutator_set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public shared_mutator_set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shared_mutator_set_cell_as_array_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shared_mutator_set_cell_as_array_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cell_as_array_args : TBase
    {
      private long _ns;
      private string _table_name;
      private MutateSpec _mutate_spec;
      private List<string> _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public MutateSpec Mutate_spec
      {
        get
        {
          return _mutate_spec;
        }
        set
        {
          __isset.mutate_spec = true;
          this._mutate_spec = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool mutate_spec;
        public bool cell;
      }

      public offer_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Mutate_spec = new MutateSpec();
                Mutate_spec.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Cell = new List<string>();
                  TList _list142 = iprot.ReadListBegin();
                  for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                  {
                    string _elem144 = null;
                    _elem144 = iprot.ReadString();
                    Cell.Add(_elem144);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cell_as_array_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Mutate_spec != null && __isset.mutate_spec) {
          field.Name = "mutate_spec";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Mutate_spec.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Cell.Count));
            foreach (string _iter145 in Cell)
            {
              oprot.WriteString(_iter145);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cell_as_array_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Mutate_spec: ");
        sb.Append(Mutate_spec== null ? "<null>" : Mutate_spec.ToString());
        sb.Append(",Cell: ");
        sb.Append(Cell);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class offer_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public offer_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("offer_cell_as_array_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("offer_cell_as_array_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private int _flags;
      private int _flush_interval;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }

      public int Flush_interval
      {
        get
        {
          return _flush_interval;
        }
        set
        {
          __isset.flush_interval = true;
          this._flush_interval = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool flags;
        public bool flush_interval;
      }

      public mutator_open_args() {
        this._flags = 0;
        this._flush_interval = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Flags = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Flush_interval = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.flags) {
          field.Name = "flags";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flags);
          oprot.WriteFieldEnd();
        }
        if (__isset.flush_interval) {
          field.Name = "flush_interval";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flush_interval);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_open_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Flags: ");
        sb.Append(Flags);
        sb.Append(",Flush_interval: ");
        sb.Append(Flush_interval);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public mutator_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_open_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_mutator_args : TBase
    {
      private long _ns;
      private string _table_name;
      private int _flags;
      private int _flush_interval;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }

      public int Flush_interval
      {
        get
        {
          return _flush_interval;
        }
        set
        {
          __isset.flush_interval = true;
          this._flush_interval = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool flags;
        public bool flush_interval;
      }

      public open_mutator_args() {
        this._flags = 0;
        this._flush_interval = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Flags = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Flush_interval = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_mutator_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.flags) {
          field.Name = "flags";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flags);
          oprot.WriteFieldEnd();
        }
        if (__isset.flush_interval) {
          field.Name = "flush_interval";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flush_interval);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_mutator_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Flags: ");
        sb.Append(Flags);
        sb.Append(",Flush_interval: ");
        sb.Append(Flush_interval);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_mutator_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_mutator_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_mutator_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_open_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private int _flags;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool flags;
      }

      public async_mutator_open_args() {
        this._flags = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Future = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Flags = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.future) {
          field.Name = "future";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Future);
          oprot.WriteFieldEnd();
        }
        if (__isset.flags) {
          field.Name = "flags";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flags);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_open_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Future: ");
        sb.Append(Future);
        sb.Append(",Flags: ");
        sb.Append(Flags);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_open_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public async_mutator_open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_open_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_mutator_async_args : TBase
    {
      private long _ns;
      private string _table_name;
      private long _future;
      private int _flags;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public long Future
      {
        get
        {
          return _future;
        }
        set
        {
          __isset.future = true;
          this._future = value;
        }
      }

      public int Flags
      {
        get
        {
          return _flags;
        }
        set
        {
          __isset.flags = true;
          this._flags = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool future;
        public bool flags;
      }

      public open_mutator_async_args() {
        this._flags = 0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Future = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Flags = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_mutator_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.future) {
          field.Name = "future";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Future);
          oprot.WriteFieldEnd();
        }
        if (__isset.flags) {
          field.Name = "flags";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flags);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_mutator_async_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Future: ");
        sb.Append(Future);
        sb.Append(",Flags: ");
        sb.Append(Flags);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class open_mutator_async_result : TBase
    {
      private long _success;
      private ClientException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public open_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_mutator_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("open_mutator_async_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_close_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public mutator_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_close_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_close_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_mutator_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public close_mutator_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_mutator_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_mutator_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_mutator_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public close_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_mutator_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_mutator_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_cancel_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public async_mutator_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_cancel_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_cancel_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_cancel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_cancel_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_mutator_async_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public cancel_mutator_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_mutator_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_mutator_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class cancel_mutator_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public cancel_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_mutator_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_mutator_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_close_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public async_mutator_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_close_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_close_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_close_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_mutator_async_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public close_mutator_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_mutator_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_mutator_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class close_mutator_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public close_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_mutator_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_mutator_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cell_args : TBase
    {
      private long _mutator;
      private Cell _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public mutator_set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Cell = new Cell();
                Cell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cell_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Cell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cell_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cell: ");
        sb.Append(Cell== null ? "<null>" : Cell.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cell_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cell_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_args : TBase
    {
      private long _ns;
      private string _table_name;
      private Cell _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cell;
      }

      public set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Cell = new Cell();
                Cell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Cell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Cell: ");
        sb.Append(Cell== null ? "<null>" : Cell.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cell_as_array_args : TBase
    {
      private long _mutator;
      private List<string> _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public mutator_set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cell = new List<string>();
                  TList _list146 = iprot.ReadListBegin();
                  for( int _i147 = 0; _i147 < _list146.Count; ++_i147)
                  {
                    string _elem148 = null;
                    _elem148 = iprot.ReadString();
                    Cell.Add(_elem148);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cell_as_array_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Cell.Count));
            foreach (string _iter149 in Cell)
            {
              oprot.WriteString(_iter149);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cell_as_array_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cell: ");
        sb.Append(Cell);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cell_as_array_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cell_as_array_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_as_array_args : TBase
    {
      private long _ns;
      private string _table_name;
      private List<string> _cell;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cell;
      }

      public set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Cell = new List<string>();
                  TList _list150 = iprot.ReadListBegin();
                  for( int _i151 = 0; _i151 < _list150.Count; ++_i151)
                  {
                    string _elem152 = null;
                    _elem152 = iprot.ReadString();
                    Cell.Add(_elem152);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_as_array_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Cell.Count));
            foreach (string _iter153 in Cell)
            {
              oprot.WriteString(_iter153);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_as_array_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Cell: ");
        sb.Append(Cell);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_as_array_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_as_array_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cells_args : TBase
    {
      private long _mutator;
      private List<Cell> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public mutator_set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list154 = iprot.ReadListBegin();
                  for( int _i155 = 0; _i155 < _list154.Count; ++_i155)
                  {
                    Cell _elem156 = new Cell();
                    _elem156 = new Cell();
                    _elem156.Read(iprot);
                    Cells.Add(_elem156);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter157 in Cells)
            {
              _iter157.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cells_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cells_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_args : TBase
    {
      private long _ns;
      private string _table_name;
      private List<Cell> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cells;
      }

      public set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list158 = iprot.ReadListBegin();
                  for( int _i159 = 0; _i159 < _list158.Count; ++_i159)
                  {
                    Cell _elem160 = new Cell();
                    _elem160 = new Cell();
                    _elem160.Read(iprot);
                    Cells.Add(_elem160);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter161 in Cells)
            {
              _iter161.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cells_as_arrays_args : TBase
    {
      private long _mutator;
      private List<List<string>> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public mutator_set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cells = new List<List<string>>();
                  TList _list162 = iprot.ReadListBegin();
                  for( int _i163 = 0; _i163 < _list162.Count; ++_i163)
                  {
                    List<string> _elem164 = new List<string>();
                    {
                      _elem164 = new List<string>();
                      TList _list165 = iprot.ReadListBegin();
                      for( int _i166 = 0; _i166 < _list165.Count; ++_i166)
                      {
                        string _elem167 = null;
                        _elem167 = iprot.ReadString();
                        _elem164.Add(_elem167);
                      }
                      iprot.ReadListEnd();
                    }
                    Cells.Add(_elem164);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Cells.Count));
            foreach (List<string> _iter168 in Cells)
            {
              {
                oprot.WriteListBegin(new TList(TType.String, _iter168.Count));
                foreach (string _iter169 in _iter168)
                {
                  oprot.WriteString(_iter169);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cells_as_arrays_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cells_as_arrays_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_as_arrays_args : TBase
    {
      private long _ns;
      private string _table_name;
      private List<List<string>> _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cells;
      }

      public set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Cells = new List<List<string>>();
                  TList _list170 = iprot.ReadListBegin();
                  for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                  {
                    List<string> _elem172 = new List<string>();
                    {
                      _elem172 = new List<string>();
                      TList _list173 = iprot.ReadListBegin();
                      for( int _i174 = 0; _i174 < _list173.Count; ++_i174)
                      {
                        string _elem175 = null;
                        _elem175 = iprot.ReadString();
                        _elem172.Add(_elem175);
                      }
                      iprot.ReadListEnd();
                    }
                    Cells.Add(_elem172);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Cells.Count));
            foreach (List<string> _iter176 in Cells)
            {
              {
                oprot.WriteListBegin(new TList(TType.String, _iter176.Count));
                foreach (string _iter177 in _iter176)
                {
                  oprot.WriteString(_iter177);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_as_arrays_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cells_serialized_args : TBase
    {
      private long _mutator;
      private byte[] _cells;
      private bool _flush;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      public bool Flush
      {
        get
        {
          return _flush;
        }
        set
        {
          __isset.flush = true;
          this._flush = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
        public bool flush;
      }

      public mutator_set_cells_serialized_args() {
        this._flush = false;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Cells = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Flush = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cells_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Cells);
          oprot.WriteFieldEnd();
        }
        if (__isset.flush) {
          field.Name = "flush";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Flush);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cells_serialized_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(",Flush: ");
        sb.Append(Flush);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_set_cells_serialized_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_set_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_set_cells_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_set_cells_serialized_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_serialized_args : TBase
    {
      private long _ns;
      private string _table_name;
      private byte[] _cells;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool cells;
      }

      public set_cells_serialized_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Cells = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Cells);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_serialized_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_serialized_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_serialized_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_flush_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public mutator_flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_flush_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_flush_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class mutator_flush_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public mutator_flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutator_flush_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutator_flush_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class flush_mutator_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public flush_mutator_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_mutator_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_mutator_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class flush_mutator_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public flush_mutator_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_mutator_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_mutator_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cell_args : TBase
    {
      private long _mutator;
      private Cell _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public async_mutator_set_cell_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Cell = new Cell();
                Cell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cell_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Cell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cell_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cell: ");
        sb.Append(Cell== null ? "<null>" : Cell.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cell_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cell_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cell_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cell_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_async_args : TBase
    {
      private long _mutator;
      private Cell _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public Cell Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public set_cell_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Cell = new Cell();
                Cell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Cell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cell: ");
        sb.Append(Cell== null ? "<null>" : Cell.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cell_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cell_as_array_args : TBase
    {
      private long _mutator;
      private List<string> _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public async_mutator_set_cell_as_array_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cell = new List<string>();
                  TList _list178 = iprot.ReadListBegin();
                  for( int _i179 = 0; _i179 < _list178.Count; ++_i179)
                  {
                    string _elem180 = null;
                    _elem180 = iprot.ReadString();
                    Cell.Add(_elem180);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cell_as_array_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Cell.Count));
            foreach (string _iter181 in Cell)
            {
              oprot.WriteString(_iter181);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cell_as_array_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cell: ");
        sb.Append(Cell);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cell_as_array_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cell_as_array_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cell_as_array_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cell_as_array_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_as_array_async_args : TBase
    {
      private long _mutator;
      private List<string> _cell;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<string> Cell
      {
        get
        {
          return _cell;
        }
        set
        {
          __isset.cell = true;
          this._cell = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cell;
      }

      public set_cell_as_array_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cell = new List<string>();
                  TList _list182 = iprot.ReadListBegin();
                  for( int _i183 = 0; _i183 < _list182.Count; ++_i183)
                  {
                    string _elem184 = null;
                    _elem184 = iprot.ReadString();
                    Cell.Add(_elem184);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_as_array_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cell != null && __isset.cell) {
          field.Name = "cell";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Cell.Count));
            foreach (string _iter185 in Cell)
            {
              oprot.WriteString(_iter185);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_as_array_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cell: ");
        sb.Append(Cell);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cell_as_array_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cell_as_array_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cell_as_array_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cell_as_array_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cells_args : TBase
    {
      private long _mutator;
      private List<Cell> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public async_mutator_set_cells_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list186 = iprot.ReadListBegin();
                  for( int _i187 = 0; _i187 < _list186.Count; ++_i187)
                  {
                    Cell _elem188 = new Cell();
                    _elem188 = new Cell();
                    _elem188.Read(iprot);
                    Cells.Add(_elem188);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cells_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter189 in Cells)
            {
              _iter189.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cells_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cells_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cells_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cells_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cells_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_async_args : TBase
    {
      private long _mutator;
      private List<Cell> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<Cell> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public set_cells_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cells = new List<Cell>();
                  TList _list190 = iprot.ReadListBegin();
                  for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                  {
                    Cell _elem192 = new Cell();
                    _elem192 = new Cell();
                    _elem192.Read(iprot);
                    Cells.Add(_elem192);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Cells.Count));
            foreach (Cell _iter193 in Cells)
            {
              _iter193.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cells_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cells_as_arrays_args : TBase
    {
      private long _mutator;
      private List<List<string>> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public async_mutator_set_cells_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cells = new List<List<string>>();
                  TList _list194 = iprot.ReadListBegin();
                  for( int _i195 = 0; _i195 < _list194.Count; ++_i195)
                  {
                    List<string> _elem196 = new List<string>();
                    {
                      _elem196 = new List<string>();
                      TList _list197 = iprot.ReadListBegin();
                      for( int _i198 = 0; _i198 < _list197.Count; ++_i198)
                      {
                        string _elem199 = null;
                        _elem199 = iprot.ReadString();
                        _elem196.Add(_elem199);
                      }
                      iprot.ReadListEnd();
                    }
                    Cells.Add(_elem196);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cells_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Cells.Count));
            foreach (List<string> _iter200 in Cells)
            {
              {
                oprot.WriteListBegin(new TList(TType.String, _iter200.Count));
                foreach (string _iter201 in _iter200)
                {
                  oprot.WriteString(_iter201);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cells_as_arrays_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cells_as_arrays_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cells_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cells_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cells_as_arrays_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_as_arrays_async_args : TBase
    {
      private long _mutator;
      private List<List<string>> _cells;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public List<List<string>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
      }

      public set_cells_as_arrays_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Cells = new List<List<string>>();
                  TList _list202 = iprot.ReadListBegin();
                  for( int _i203 = 0; _i203 < _list202.Count; ++_i203)
                  {
                    List<string> _elem204 = new List<string>();
                    {
                      _elem204 = new List<string>();
                      TList _list205 = iprot.ReadListBegin();
                      for( int _i206 = 0; _i206 < _list205.Count; ++_i206)
                      {
                        string _elem207 = null;
                        _elem207 = iprot.ReadString();
                        _elem204.Add(_elem207);
                      }
                      iprot.ReadListEnd();
                    }
                    Cells.Add(_elem204);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_as_arrays_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Cells.Count));
            foreach (List<string> _iter208 in Cells)
            {
              {
                oprot.WriteListBegin(new TList(TType.String, _iter208.Count));
                foreach (string _iter209 in _iter208)
                {
                  oprot.WriteString(_iter209);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_as_arrays_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_as_arrays_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cells_as_arrays_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_as_arrays_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_as_arrays_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cells_serialized_args : TBase
    {
      private long _mutator;
      private byte[] _cells;
      private bool _flush;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      public bool Flush
      {
        get
        {
          return _flush;
        }
        set
        {
          __isset.flush = true;
          this._flush = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
        public bool flush;
      }

      public async_mutator_set_cells_serialized_args() {
        this._flush = false;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Cells = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Flush = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cells_serialized_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Cells);
          oprot.WriteFieldEnd();
        }
        if (__isset.flush) {
          field.Name = "flush";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Flush);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cells_serialized_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(",Flush: ");
        sb.Append(Flush);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_set_cells_serialized_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_set_cells_serialized_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_set_cells_serialized_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_set_cells_serialized_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_serialized_async_args : TBase
    {
      private long _mutator;
      private byte[] _cells;
      private bool _flush;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }

      public byte[] Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      public bool Flush
      {
        get
        {
          return _flush;
        }
        set
        {
          __isset.flush = true;
          this._flush = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
        public bool cells;
        public bool flush;
      }

      public set_cells_serialized_async_args() {
        this._flush = false;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Cells = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Flush = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_serialized_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        if (Cells != null && __isset.cells) {
          field.Name = "cells";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Cells);
          oprot.WriteFieldEnd();
        }
        if (__isset.flush) {
          field.Name = "flush";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Flush);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_serialized_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(",Cells: ");
        sb.Append(Cells);
        sb.Append(",Flush: ");
        sb.Append(Flush);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class set_cells_serialized_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public set_cells_serialized_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("set_cells_serialized_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("set_cells_serialized_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_flush_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public async_mutator_flush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_flush_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_flush_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class async_mutator_flush_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public async_mutator_flush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("async_mutator_flush_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("async_mutator_flush_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class flush_mutator_async_args : TBase
    {
      private long _mutator;

      public long Mutator
      {
        get
        {
          return _mutator;
        }
        set
        {
          __isset.mutator = true;
          this._mutator = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool mutator;
      }

      public flush_mutator_async_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Mutator = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_mutator_async_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mutator) {
          field.Name = "mutator";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Mutator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_mutator_async_args(");
        sb.Append("Mutator: ");
        sb.Append(Mutator);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class flush_mutator_async_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public flush_mutator_async_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flush_mutator_async_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("flush_mutator_async_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_exists_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public namespace_exists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_exists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_exists_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_exists_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public namespace_exists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_exists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_exists_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class exists_namespace_args : TBase
    {
      private string _ns;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public exists_namespace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("exists_namespace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("exists_namespace_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class exists_namespace_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public exists_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("exists_namespace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("exists_namespace_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class exists_table_args : TBase
    {
      private long _ns;
      private string _name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
      }

      public exists_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("exists_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("exists_table_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class exists_table_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public exists_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("exists_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("exists_table_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_exists_args : TBase
    {
      private long _ns;
      private string _name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
      }

      public table_exists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_exists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_exists_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_exists_result : TBase
    {
      private bool _success;
      private ClientException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_exists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_exists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_exists_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_id_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_id_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_id_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_id_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_id_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_id_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_id_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_id_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_table_id_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_table_id_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_table_id_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_table_id_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_table_id_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_table_id_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_table_id_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_table_id_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_schema_str_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_schema_str_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_schema_str_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_schema_str_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_schema_str_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_schema_str_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_schema_str_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_schema_str_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_str_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_schema_str_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_str_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_str_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_str_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_schema_str_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_str_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_str_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_schema_str_with_ids_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_schema_str_with_ids_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_schema_str_with_ids_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_schema_str_with_ids_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_schema_str_with_ids_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_schema_str_with_ids_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_schema_str_with_ids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_schema_str_with_ids_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_str_with_ids_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_schema_str_with_ids_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_str_with_ids_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_str_with_ids_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_str_with_ids_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_schema_str_with_ids_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_str_with_ids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_str_with_ids_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_schema_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_schema_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_schema_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_schema_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_schema_result : TBase
    {
      private Schema _success;
      private ClientException _e;

      public Schema Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_schema_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Schema();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_schema_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_schema_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_schema_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_schema_result : TBase
    {
      private Schema _success;
      private ClientException _e;

      public Schema Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_schema_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Schema();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_schema_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_schema_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_tables_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public get_tables_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_tables_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_tables_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_tables_result : TBase
    {
      private List<string> _success;
      private ClientException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_tables_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list210 = iprot.ReadListBegin();
                  for( int _i211 = 0; _i211 < _list210.Count; ++_i211)
                  {
                    string _elem212 = null;
                    _elem212 = iprot.ReadString();
                    Success.Add(_elem212);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_tables_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter213 in Success)
              {
                oprot.WriteString(_iter213);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_tables_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_get_listing_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public namespace_get_listing_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_get_listing_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_get_listing_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_get_listing_result : TBase
    {
      private List<NamespaceListing> _success;
      private ClientException _e;

      public List<NamespaceListing> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public namespace_get_listing_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<NamespaceListing>();
                  TList _list214 = iprot.ReadListBegin();
                  for( int _i215 = 0; _i215 < _list214.Count; ++_i215)
                  {
                    NamespaceListing _elem216 = new NamespaceListing();
                    _elem216 = new NamespaceListing();
                    _elem216.Read(iprot);
                    Success.Add(_elem216);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_get_listing_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (NamespaceListing _iter217 in Success)
              {
                _iter217.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_get_listing_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_listing_args : TBase
    {
      private long _ns;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
      }

      public get_listing_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_listing_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_listing_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_listing_result : TBase
    {
      private List<NamespaceListing> _success;
      private ClientException _e;

      public List<NamespaceListing> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_listing_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<NamespaceListing>();
                  TList _list218 = iprot.ReadListBegin();
                  for( int _i219 = 0; _i219 < _list218.Count; ++_i219)
                  {
                    NamespaceListing _elem220 = new NamespaceListing();
                    _elem220 = new NamespaceListing();
                    _elem220.Read(iprot);
                    Success.Add(_elem220);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_listing_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (NamespaceListing _iter221 in Success)
              {
                _iter221.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_listing_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_splits_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public table_get_splits_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_splits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_splits_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_get_splits_result : TBase
    {
      private List<TableSplit> _success;
      private ClientException _e;

      public List<TableSplit> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public table_get_splits_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TableSplit>();
                  TList _list222 = iprot.ReadListBegin();
                  for( int _i223 = 0; _i223 < _list222.Count; ++_i223)
                  {
                    TableSplit _elem224 = new TableSplit();
                    _elem224 = new TableSplit();
                    _elem224.Read(iprot);
                    Success.Add(_elem224);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_get_splits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TableSplit _iter225 in Success)
              {
                _iter225.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_get_splits_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_table_splits_args : TBase
    {
      private long _ns;
      private string _table_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
      }

      public get_table_splits_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_table_splits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_table_splits_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_table_splits_result : TBase
    {
      private List<TableSplit> _success;
      private ClientException _e;

      public List<TableSplit> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public get_table_splits_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TableSplit>();
                  TList _list226 = iprot.ReadListBegin();
                  for( int _i227 = 0; _i227 < _list226.Count; ++_i227)
                  {
                    TableSplit _elem228 = new TableSplit();
                    _elem228 = new TableSplit();
                    _elem228.Read(iprot);
                    Success.Add(_elem228);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_table_splits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TableSplit _iter229 in Success)
              {
                _iter229.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_table_splits_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_drop_args : TBase
    {
      private string _ns;
      private bool _if_exists;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool if_exists;
      }

      public namespace_drop_args() {
        this._if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                If_exists = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_drop_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        if (__isset.if_exists) {
          field.Name = "if_exists";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(If_exists);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_drop_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",If_exists: ");
        sb.Append(If_exists);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class namespace_drop_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public namespace_drop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("namespace_drop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("namespace_drop_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_namespace_args : TBase
    {
      private string _ns;
      private bool _if_exists;

      public string Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool if_exists;
      }

      public drop_namespace_args() {
        this._if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ns = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                If_exists = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_namespace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ns != null && __isset.ns) {
          field.Name = "ns";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ns);
          oprot.WriteFieldEnd();
        }
        if (__isset.if_exists) {
          field.Name = "if_exists";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(If_exists);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_namespace_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",If_exists: ");
        sb.Append(If_exists);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_namespace_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public drop_namespace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_namespace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_namespace_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rename_table_args : TBase
    {
      private long _ns;
      private string _name;
      private string _new_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string New_name
      {
        get
        {
          return _new_name;
        }
        set
        {
          __isset.new_name = true;
          this._new_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool new_name;
      }

      public rename_table_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                New_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rename_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (New_name != null && __isset.new_name) {
          field.Name = "new_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(New_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rename_table_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",New_name: ");
        sb.Append(New_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class rename_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public rename_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rename_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rename_table_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_rename_args : TBase
    {
      private long _ns;
      private string _name;
      private string _new_name;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string New_name
      {
        get
        {
          return _new_name;
        }
        set
        {
          __isset.new_name = true;
          this._new_name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool new_name;
      }

      public table_rename_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                New_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_rename_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (New_name != null && __isset.new_name) {
          field.Name = "new_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(New_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_rename_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",New_name: ");
        sb.Append(New_name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_rename_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public table_rename_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_rename_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_rename_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_table_args : TBase
    {
      private long _ns;
      private string _name;
      private bool _if_exists;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool if_exists;
      }

      public drop_table_args() {
        this._if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                If_exists = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_table_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.if_exists) {
          field.Name = "if_exists";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(If_exists);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_table_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",If_exists: ");
        sb.Append(If_exists);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class drop_table_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public drop_table_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("drop_table_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("drop_table_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_drop_args : TBase
    {
      private long _ns;
      private string _name;
      private bool _if_exists;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public bool If_exists
      {
        get
        {
          return _if_exists;
        }
        set
        {
          __isset.if_exists = true;
          this._if_exists = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool name;
        public bool if_exists;
      }

      public table_drop_args() {
        this._if_exists = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                If_exists = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_drop_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.if_exists) {
          field.Name = "if_exists";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(If_exists);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_drop_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",If_exists: ");
        sb.Append(If_exists);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class table_drop_result : TBase
    {
      private ClientException _e;

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool e;
      }

      public table_drop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("table_drop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("table_drop_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class generate_guid_args : TBase
    {

      public generate_guid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("generate_guid_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("generate_guid_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class generate_guid_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public generate_guid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("generate_guid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("generate_guid_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_cell_unique_args : TBase
    {
      private long _ns;
      private string _table_name;
      private Key _key;
      private string _value;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Table_name
      {
        get
        {
          return _table_name;
        }
        set
        {
          __isset.table_name = true;
          this._table_name = value;
        }
      }

      public Key Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool table_name;
        public bool key;
        public bool value;
      }

      public create_cell_unique_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Key = new Key();
                Key.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_cell_unique_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Table_name != null && __isset.table_name) {
          field.Name = "table_name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table_name);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Key.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_cell_unique_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Table_name: ");
        sb.Append(Table_name);
        sb.Append(",Key: ");
        sb.Append(Key== null ? "<null>" : Key.ToString());
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class create_cell_unique_result : TBase
    {
      private string _success;
      private ClientException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public create_cell_unique_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("create_cell_unique_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("create_cell_unique_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class error_get_text_args : TBase
    {
      private int _error_code;

      public int Error_code
      {
        get
        {
          return _error_code;
        }
        set
        {
          __isset.error_code = true;
          this._error_code = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool error_code;
      }

      public error_get_text_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Error_code = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("error_get_text_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.error_code) {
          field.Name = "error_code";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Error_code);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("error_get_text_args(");
        sb.Append("Error_code: ");
        sb.Append(Error_code);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class error_get_text_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public error_get_text_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("error_get_text_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("error_get_text_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
