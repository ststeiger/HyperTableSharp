/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Hypertable.ThriftGen
{
  public class HqlService {
    public interface Iface : Hypertable.ThriftGen.ClientService.Iface {
      HqlResult hql_exec(long ns, string command, bool noflush, bool unbuffered);
      HqlResult hql_query(long ns, string command);
      HqlResultAsArrays hql_exec_as_arrays(long ns, string command, bool noflush, bool unbuffered);
      HqlResult2 hql_exec2(long ns, string command, bool noflush, bool unbuffered);
      HqlResultAsArrays hql_query_as_arrays(long ns, string command);
      HqlResult2 hql_query2(long ns, string command);
    }

    public class Client : Hypertable.ThriftGen.ClientService.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      public HqlResult hql_exec(long ns, string command, bool noflush, bool unbuffered)
      {
        send_hql_exec(ns, command, noflush, unbuffered);
        return recv_hql_exec();
      }

      public void send_hql_exec(long ns, string command, bool noflush, bool unbuffered)
      {
        oprot_.WriteMessageBegin(new TMessage("hql_exec", TMessageType.Call, seqid_));
        hql_exec_args args = new hql_exec_args();
        args.Ns = ns;
        args.Command = command;
        args.Noflush = noflush;
        args.Unbuffered = unbuffered;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HqlResult recv_hql_exec()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hql_exec_result result = new hql_exec_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hql_exec failed: unknown result");
      }

      public HqlResult hql_query(long ns, string command)
      {
        send_hql_query(ns, command);
        return recv_hql_query();
      }

      public void send_hql_query(long ns, string command)
      {
        oprot_.WriteMessageBegin(new TMessage("hql_query", TMessageType.Call, seqid_));
        hql_query_args args = new hql_query_args();
        args.Ns = ns;
        args.Command = command;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HqlResult recv_hql_query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hql_query_result result = new hql_query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hql_query failed: unknown result");
      }

      public HqlResultAsArrays hql_exec_as_arrays(long ns, string command, bool noflush, bool unbuffered)
      {
        send_hql_exec_as_arrays(ns, command, noflush, unbuffered);
        return recv_hql_exec_as_arrays();
      }

      public void send_hql_exec_as_arrays(long ns, string command, bool noflush, bool unbuffered)
      {
        oprot_.WriteMessageBegin(new TMessage("hql_exec_as_arrays", TMessageType.Call, seqid_));
        hql_exec_as_arrays_args args = new hql_exec_as_arrays_args();
        args.Ns = ns;
        args.Command = command;
        args.Noflush = noflush;
        args.Unbuffered = unbuffered;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HqlResultAsArrays recv_hql_exec_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hql_exec_as_arrays_result result = new hql_exec_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hql_exec_as_arrays failed: unknown result");
      }

      public HqlResult2 hql_exec2(long ns, string command, bool noflush, bool unbuffered)
      {
        send_hql_exec2(ns, command, noflush, unbuffered);
        return recv_hql_exec2();
      }

      public void send_hql_exec2(long ns, string command, bool noflush, bool unbuffered)
      {
        oprot_.WriteMessageBegin(new TMessage("hql_exec2", TMessageType.Call, seqid_));
        hql_exec2_args args = new hql_exec2_args();
        args.Ns = ns;
        args.Command = command;
        args.Noflush = noflush;
        args.Unbuffered = unbuffered;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HqlResult2 recv_hql_exec2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hql_exec2_result result = new hql_exec2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hql_exec2 failed: unknown result");
      }

      public HqlResultAsArrays hql_query_as_arrays(long ns, string command)
      {
        send_hql_query_as_arrays(ns, command);
        return recv_hql_query_as_arrays();
      }

      public void send_hql_query_as_arrays(long ns, string command)
      {
        oprot_.WriteMessageBegin(new TMessage("hql_query_as_arrays", TMessageType.Call, seqid_));
        hql_query_as_arrays_args args = new hql_query_as_arrays_args();
        args.Ns = ns;
        args.Command = command;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HqlResultAsArrays recv_hql_query_as_arrays()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hql_query_as_arrays_result result = new hql_query_as_arrays_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hql_query_as_arrays failed: unknown result");
      }

      public HqlResult2 hql_query2(long ns, string command)
      {
        send_hql_query2(ns, command);
        return recv_hql_query2();
      }

      public void send_hql_query2(long ns, string command)
      {
        oprot_.WriteMessageBegin(new TMessage("hql_query2", TMessageType.Call, seqid_));
        hql_query2_args args = new hql_query2_args();
        args.Ns = ns;
        args.Command = command;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public HqlResult2 recv_hql_query2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        hql_query2_result result = new hql_query2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hql_query2 failed: unknown result");
      }

    }
    public class Processor : Hypertable.ThriftGen.ClientService.Processor, TProcessor {
      public Processor(Iface iface) : base(iface)
      {
        iface_ = iface;
        processMap_["hql_exec"] = hql_exec_Process;
        processMap_["hql_query"] = hql_query_Process;
        processMap_["hql_exec_as_arrays"] = hql_exec_as_arrays_Process;
        processMap_["hql_exec2"] = hql_exec2_Process;
        processMap_["hql_query_as_arrays"] = hql_query_as_arrays_Process;
        processMap_["hql_query2"] = hql_query2_Process;
      }

      private Iface iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void hql_exec_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hql_exec_args args = new hql_exec_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hql_exec_result result = new hql_exec_result();
        try {
          result.Success = iface_.hql_exec(args.Ns, args.Command, args.Noflush, args.Unbuffered);
        } catch (Hypertable.ThriftGen.ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("hql_exec", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void hql_query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hql_query_args args = new hql_query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hql_query_result result = new hql_query_result();
        try {
          result.Success = iface_.hql_query(args.Ns, args.Command);
        } catch (Hypertable.ThriftGen.ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("hql_query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void hql_exec_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hql_exec_as_arrays_args args = new hql_exec_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hql_exec_as_arrays_result result = new hql_exec_as_arrays_result();
        try {
          result.Success = iface_.hql_exec_as_arrays(args.Ns, args.Command, args.Noflush, args.Unbuffered);
        } catch (Hypertable.ThriftGen.ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("hql_exec_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void hql_exec2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hql_exec2_args args = new hql_exec2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hql_exec2_result result = new hql_exec2_result();
        try {
          result.Success = iface_.hql_exec2(args.Ns, args.Command, args.Noflush, args.Unbuffered);
        } catch (Hypertable.ThriftGen.ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("hql_exec2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void hql_query_as_arrays_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hql_query_as_arrays_args args = new hql_query_as_arrays_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hql_query_as_arrays_result result = new hql_query_as_arrays_result();
        try {
          result.Success = iface_.hql_query_as_arrays(args.Ns, args.Command);
        } catch (Hypertable.ThriftGen.ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("hql_query_as_arrays", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void hql_query2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        hql_query2_args args = new hql_query2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        hql_query2_result result = new hql_query2_result();
        try {
          result.Success = iface_.hql_query2(args.Ns, args.Command);
        } catch (Hypertable.ThriftGen.ClientException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("hql_query2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class hql_exec_args : TBase
    {
      private long _ns;
      private string _command;
      private bool _noflush;
      private bool _unbuffered;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }

      public bool Noflush
      {
        get
        {
          return _noflush;
        }
        set
        {
          __isset.noflush = true;
          this._noflush = value;
        }
      }

      public bool Unbuffered
      {
        get
        {
          return _unbuffered;
        }
        set
        {
          __isset.unbuffered = true;
          this._unbuffered = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool command;
        public bool noflush;
        public bool unbuffered;
      }

      public hql_exec_args() {
        this._noflush = false;
        this._unbuffered = false;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Noflush = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Unbuffered = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_exec_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        if (__isset.noflush) {
          field.Name = "noflush";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Noflush);
          oprot.WriteFieldEnd();
        }
        if (__isset.unbuffered) {
          field.Name = "unbuffered";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Unbuffered);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_exec_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(",Noflush: ");
        sb.Append(Noflush);
        sb.Append(",Unbuffered: ");
        sb.Append(Unbuffered);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_exec_result : TBase
    {
      private HqlResult _success;
      private Hypertable.ThriftGen.ClientException _e;

      public HqlResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Hypertable.ThriftGen.ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public hql_exec_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HqlResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new Hypertable.ThriftGen.ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_exec_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_exec_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_query_args : TBase
    {
      private long _ns;
      private string _command;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool command;
      }

      public hql_query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_query_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_query_result : TBase
    {
      private HqlResult _success;
      private Hypertable.ThriftGen.ClientException _e;

      public HqlResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Hypertable.ThriftGen.ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public hql_query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HqlResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new Hypertable.ThriftGen.ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_query_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_exec_as_arrays_args : TBase
    {
      private long _ns;
      private string _command;
      private bool _noflush;
      private bool _unbuffered;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }

      public bool Noflush
      {
        get
        {
          return _noflush;
        }
        set
        {
          __isset.noflush = true;
          this._noflush = value;
        }
      }

      public bool Unbuffered
      {
        get
        {
          return _unbuffered;
        }
        set
        {
          __isset.unbuffered = true;
          this._unbuffered = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool command;
        public bool noflush;
        public bool unbuffered;
      }

      public hql_exec_as_arrays_args() {
        this._noflush = false;
        this._unbuffered = false;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Noflush = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Unbuffered = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_exec_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        if (__isset.noflush) {
          field.Name = "noflush";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Noflush);
          oprot.WriteFieldEnd();
        }
        if (__isset.unbuffered) {
          field.Name = "unbuffered";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Unbuffered);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_exec_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(",Noflush: ");
        sb.Append(Noflush);
        sb.Append(",Unbuffered: ");
        sb.Append(Unbuffered);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_exec_as_arrays_result : TBase
    {
      private HqlResultAsArrays _success;
      private Hypertable.ThriftGen.ClientException _e;

      public HqlResultAsArrays Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Hypertable.ThriftGen.ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public hql_exec_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HqlResultAsArrays();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new Hypertable.ThriftGen.ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_exec_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_exec_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_exec2_args : TBase
    {
      private long _ns;
      private string _command;
      private bool _noflush;
      private bool _unbuffered;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }

      public bool Noflush
      {
        get
        {
          return _noflush;
        }
        set
        {
          __isset.noflush = true;
          this._noflush = value;
        }
      }

      public bool Unbuffered
      {
        get
        {
          return _unbuffered;
        }
        set
        {
          __isset.unbuffered = true;
          this._unbuffered = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool command;
        public bool noflush;
        public bool unbuffered;
      }

      public hql_exec2_args() {
        this._noflush = false;
        this._unbuffered = false;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Noflush = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Unbuffered = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_exec2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        if (__isset.noflush) {
          field.Name = "noflush";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Noflush);
          oprot.WriteFieldEnd();
        }
        if (__isset.unbuffered) {
          field.Name = "unbuffered";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Unbuffered);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_exec2_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(",Noflush: ");
        sb.Append(Noflush);
        sb.Append(",Unbuffered: ");
        sb.Append(Unbuffered);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_exec2_result : TBase
    {
      private HqlResult2 _success;
      private Hypertable.ThriftGen.ClientException _e;

      public HqlResult2 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Hypertable.ThriftGen.ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public hql_exec2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HqlResult2();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new Hypertable.ThriftGen.ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_exec2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_exec2_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_query_as_arrays_args : TBase
    {
      private long _ns;
      private string _command;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool command;
      }

      public hql_query_as_arrays_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_query_as_arrays_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_query_as_arrays_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_query_as_arrays_result : TBase
    {
      private HqlResultAsArrays _success;
      private Hypertable.ThriftGen.ClientException _e;

      public HqlResultAsArrays Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Hypertable.ThriftGen.ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public hql_query_as_arrays_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HqlResultAsArrays();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new Hypertable.ThriftGen.ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_query_as_arrays_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_query_as_arrays_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_query2_args : TBase
    {
      private long _ns;
      private string _command;

      public long Ns
      {
        get
        {
          return _ns;
        }
        set
        {
          __isset.ns = true;
          this._ns = value;
        }
      }

      public string Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ns;
        public bool command;
      }

      public hql_query2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ns = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_query2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ns) {
          field.Name = "ns";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ns);
          oprot.WriteFieldEnd();
        }
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_query2_args(");
        sb.Append("Ns: ");
        sb.Append(Ns);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class hql_query2_result : TBase
    {
      private HqlResult2 _success;
      private Hypertable.ThriftGen.ClientException _e;

      public HqlResult2 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Hypertable.ThriftGen.ClientException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool e;
      }

      public hql_query2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HqlResult2();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new Hypertable.ThriftGen.ClientException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("hql_query2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("hql_query2_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
